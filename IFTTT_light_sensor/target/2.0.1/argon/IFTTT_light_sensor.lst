
/Users/duvaldi/Desktop/IFTTT/IFTTT_light_sensor/target/2.0.1/argon/IFTTT_light_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d63e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5d4  000d63e4  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b0  2003e640  2003e640  0002e640  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6450  000d6450  00026450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6478  000d6478  00026478  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001127ef  00000000  00000000  0002647c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012789  00000000  00000000  00138c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000238cb  00000000  00000000  0014b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ee0  00000000  00000000  0016ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006590  00000000  00000000  00170b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003380d  00000000  00000000  0017712f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e73b  00000000  00000000  001aa93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105638  00000000  00000000  001d9077  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000544c  00000000  00000000  002de6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f887 	bl	d6140 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f88f 	bl	d615c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5d4 	.word	0x2003e5d4
   d4048:	000d63e4 	.word	0x000d63e4
   d404c:	2003e640 	.word	0x2003e640
   d4050:	2003e640 	.word	0x2003e640
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fb2f 	bl	d56c0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d63b8 	.word	0x000d63b8
   d407c:	000d63dc 	.word	0x000d63dc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b836 	b.w	d40f0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f847 	bl	d4118 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bad9 	b.w	d5644 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bad3 	b.w	d463c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bad1 	b.w	d463c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bad7 	b.w	d464c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40ae:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b2:	4604      	mov	r4, r0
          _M_dispose();
   d40b4:	689b      	ldr	r3, [r3, #8]
   d40b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40b8:	68a3      	ldr	r3, [r4, #8]
   d40ba:	3b01      	subs	r3, #1
   d40bc:	60a3      	str	r3, [r4, #8]
   d40be:	b92b      	cbnz	r3, d40cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d40c0:	6823      	ldr	r3, [r4, #0]
   d40c2:	4620      	mov	r0, r4
   d40c4:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d40ca:	4718      	bx	r3
    }
   d40cc:	bd10      	pop	{r4, pc}
	...

000d40d0 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40d0:	b513      	push	{r0, r1, r4, lr}
   d40d2:	4b06      	ldr	r3, [pc, #24]	; (d40ec <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
   d40d4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d6:	f88d 3000 	strb.w	r3, [sp]
   d40da:	2200      	movs	r2, #0
   d40dc:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40de:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f000 fc6c 	bl	d49bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
   d40e4:	4620      	mov	r0, r4
   d40e6:	b002      	add	sp, #8
   d40e8:	bd10      	pop	{r4, pc}
   d40ea:	bf00      	nop
   d40ec:	2003e644 	.word	0x2003e644

000d40f0 <setup>:

BH1750 lightSensor(0x23, Wire);
bool flag = true;


void setup() {
   d40f0:	b510      	push	{r4, lr}
    Serial.begin(9600);
    lightSensor.begin(); 
   d40f2:	4c08      	ldr	r4, [pc, #32]	; (d4114 <setup+0x24>)
    Serial.begin(9600);
   d40f4:	f001 fa1c 	bl	d5530 <_Z16_fetch_usbserialv>
   d40f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fc:	f001 fa0c 	bl	d5518 <_ZN9USBSerial5beginEl>
    lightSensor.begin(); 
   d4100:	4620      	mov	r0, r4
   d4102:	f000 f892 	bl	d422a <_ZN6BH17505beginEv>
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res2);
   d4106:	4620      	mov	r0, r4
   d4108:	2121      	movs	r1, #33	; 0x21
    
}
   d410a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lightSensor.set_sensor_mode(BH1750::forced_mode_high_res2);
   d410e:	f000 b8c8 	b.w	d42a2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
   d4112:	bf00      	nop
   d4114:	2003e648 	.word	0x2003e648

000d4118 <loop>:


void loop() {
   d4118:	b570      	push	{r4, r5, r6, lr}
   d411a:	ed2d 8b04 	vpush	{d8-d9}

    lightSensor.make_forced_measurement();
   d411e:	4831      	ldr	r0, [pc, #196]	; (d41e4 <loop+0xcc>)
    float  light_val = lightSensor.get_light_level();
    Serial.print("Light level: ");
    Serial.println(light_val);

    while (light_val > 32000)
   d4120:	eddf 8a31 	vldr	s17, [pc, #196]	; d41e8 <loop+0xd0>
   d4124:	4c31      	ldr	r4, [pc, #196]	; (d41ec <loop+0xd4>)
void loop() {
   d4126:	b082      	sub	sp, #8
    lightSensor.make_forced_measurement();
   d4128:	f000 f8d0 	bl	d42cc <_ZN6BH175023make_forced_measurementEv>
    float  light_val = lightSensor.get_light_level();
   d412c:	482d      	ldr	r0, [pc, #180]	; (d41e4 <loop+0xcc>)
   d412e:	f000 f887 	bl	d4240 <_ZN6BH175015get_light_levelEv>
   d4132:	eeb0 8a40 	vmov.f32	s16, s0
    Serial.print("Light level: ");
   d4136:	f001 f9fb 	bl	d5530 <_Z16_fetch_usbserialv>
   d413a:	492d      	ldr	r1, [pc, #180]	; (d41f0 <loop+0xd8>)
   d413c:	f000 ffbc 	bl	d50b8 <_ZN5Print5printEPKc>
    Serial.println(light_val);
   d4140:	f001 f9f6 	bl	d5530 <_Z16_fetch_usbserialv>
   d4144:	2102      	movs	r1, #2
   d4146:	eeb0 0a48 	vmov.f32	s0, s16
   d414a:	f001 f8ba 	bl	d52c2 <_ZN5Print7printlnEfi>
   d414e:	eeb0 9a68 	vmov.f32	s18, s17
    while (light_val > 32000)
   d4152:	eeb4 8ae8 	vcmpe.f32	s16, s17
   d4156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d415a:	dd19      	ble.n	d4190 <loop+0x78>
    {
      if (flag)
   d415c:	7823      	ldrb	r3, [r4, #0]
   d415e:	b16b      	cbz	r3, d417c <loop+0x64>
      {
        Particle.publish("{sunny}");
   d4160:	4668      	mov	r0, sp
   d4162:	4924      	ldr	r1, [pc, #144]	; (d41f4 <loop+0xdc>)
   d4164:	f7ff ffb4 	bl	d40d0 <_ZN10CloudClass7publishEPKc.isra.0>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4168:	9801      	ldr	r0, [sp, #4]
   d416a:	b128      	cbz	r0, d4178 <loop+0x60>
      if (--_M_use_count == 0)
   d416c:	6843      	ldr	r3, [r0, #4]
   d416e:	3b01      	subs	r3, #1
   d4170:	6043      	str	r3, [r0, #4]
   d4172:	b90b      	cbnz	r3, d4178 <loop+0x60>
   d4174:	f7ff ff9b 	bl	d40ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
        flag = false;
   d4178:	2300      	movs	r3, #0
   d417a:	7023      	strb	r3, [r4, #0]
      }
      
      delay(1000);
   d417c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4180:	f000 fa84 	bl	d468c <delay>
      //lightSensor.make_forced_measurement();
      light_val = lightSensor.get_light_level();
   d4184:	4817      	ldr	r0, [pc, #92]	; (d41e4 <loop+0xcc>)
   d4186:	f000 f85b 	bl	d4240 <_ZN6BH175015get_light_levelEv>
   d418a:	eeb0 8a40 	vmov.f32	s16, s0
    while (light_val > 32000)
   d418e:	e7e0      	b.n	d4152 <loop+0x3a>
    }
    
    flag = true;
   d4190:	2301      	movs	r3, #1

    while (light_val < 32000)
    {
      if (flag)  
      {
        Particle.publish("shady");
   d4192:	4e19      	ldr	r6, [pc, #100]	; (d41f8 <loop+0xe0>)
        flag = false;
      }

      delay(1000);
      //lightSensor.make_forced_measurement();
      light_val = lightSensor.get_light_level();
   d4194:	4d13      	ldr	r5, [pc, #76]	; (d41e4 <loop+0xcc>)
    flag = true;
   d4196:	7023      	strb	r3, [r4, #0]
    while (light_val < 32000)
   d4198:	eeb4 8ac9 	vcmpe.f32	s16, s18
   d419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41a0:	d519      	bpl.n	d41d6 <loop+0xbe>
      if (flag)  
   d41a2:	7823      	ldrb	r3, [r4, #0]
   d41a4:	b16b      	cbz	r3, d41c2 <loop+0xaa>
        Particle.publish("shady");
   d41a6:	4668      	mov	r0, sp
   d41a8:	4631      	mov	r1, r6
   d41aa:	f7ff ff91 	bl	d40d0 <_ZN10CloudClass7publishEPKc.isra.0>
	if (_M_pi != nullptr)
   d41ae:	9801      	ldr	r0, [sp, #4]
   d41b0:	b128      	cbz	r0, d41be <loop+0xa6>
      if (--_M_use_count == 0)
   d41b2:	6843      	ldr	r3, [r0, #4]
   d41b4:	3b01      	subs	r3, #1
   d41b6:	6043      	str	r3, [r0, #4]
   d41b8:	b90b      	cbnz	r3, d41be <loop+0xa6>
   d41ba:	f7ff ff78 	bl	d40ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
        flag = false;
   d41be:	2300      	movs	r3, #0
   d41c0:	7023      	strb	r3, [r4, #0]
      delay(1000);
   d41c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41c6:	f000 fa61 	bl	d468c <delay>
      light_val = lightSensor.get_light_level();
   d41ca:	4628      	mov	r0, r5
   d41cc:	f000 f838 	bl	d4240 <_ZN6BH175015get_light_levelEv>
   d41d0:	eeb0 8a40 	vmov.f32	s16, s0
    while (light_val < 32000)
   d41d4:	e7e0      	b.n	d4198 <loop+0x80>
    }
    flag = true; 
   d41d6:	2301      	movs	r3, #1
   d41d8:	7023      	strb	r3, [r4, #0]

   d41da:	b002      	add	sp, #8
   d41dc:	ecbd 8b04 	vpop	{d8-d9}
   d41e0:	bd70      	pop	{r4, r5, r6, pc}
   d41e2:	bf00      	nop
   d41e4:	2003e648 	.word	0x2003e648
   d41e8:	46fa0000 	.word	0x46fa0000
   d41ec:	2003e5d4 	.word	0x2003e5d4
   d41f0:	000d6214 	.word	0x000d6214
   d41f4:	000d6222 	.word	0x000d6222
   d41f8:	000d622a 	.word	0x000d622a

000d41fc <_GLOBAL__sub_I_lightSensor>:
   d41fc:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41fe:	4b06      	ldr	r3, [pc, #24]	; (d4218 <_GLOBAL__sub_I_lightSensor+0x1c>)
   d4200:	2200      	movs	r2, #0
   d4202:	701a      	strb	r2, [r3, #0]
BH1750 lightSensor(0x23, Wire);
   d4204:	f001 faa6 	bl	d5754 <_Z19__fetch_global_Wirev>
   d4208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BH1750 lightSensor(0x23, Wire);
   d420c:	4602      	mov	r2, r0
   d420e:	2123      	movs	r1, #35	; 0x23
   d4210:	4802      	ldr	r0, [pc, #8]	; (d421c <_GLOBAL__sub_I_lightSensor+0x20>)
   d4212:	f000 b805 	b.w	d4220 <_ZN6BH1750C1EhR7TwoWire>
   d4216:	bf00      	nop
   d4218:	2003e644 	.word	0x2003e644
   d421c:	2003e648 	.word	0x2003e648

000d4220 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d4220:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d4222:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   d4224:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   d4226:	7002      	strb	r2, [r0, #0]
}
   d4228:	4770      	bx	lr

000d422a <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d422a:	b510      	push	{r4, lr}
   d422c:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d422e:	6840      	ldr	r0, [r0, #4]
   d4230:	f000 fdf3 	bl	d4e1a <_ZN7TwoWire9isEnabledEv>
   d4234:	b910      	cbnz	r0, d423c <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d4236:	6860      	ldr	r0, [r4, #4]
   d4238:	f000 fdb2 	bl	d4da0 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d423c:	2001      	movs	r0, #1
   d423e:	bd10      	pop	{r4, pc}

000d4240 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d4240:	b570      	push	{r4, r5, r6, lr}
   d4242:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d4244:	7841      	ldrb	r1, [r0, #1]
   d4246:	6840      	ldr	r0, [r0, #4]
   d4248:	f000 fddc 	bl	d4e04 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d424c:	7869      	ldrb	r1, [r5, #1]
   d424e:	6868      	ldr	r0, [r5, #4]
   d4250:	2202      	movs	r2, #2
   d4252:	f000 fdd4 	bl	d4dfe <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d4256:	6868      	ldr	r0, [r5, #4]
   d4258:	6803      	ldr	r3, [r0, #0]
   d425a:	695b      	ldr	r3, [r3, #20]
   d425c:	4798      	blx	r3
   d425e:	4606      	mov	r6, r0
   d4260:	6868      	ldr	r0, [r5, #4]
   d4262:	6803      	ldr	r3, [r0, #0]
   d4264:	695b      	ldr	r3, [r3, #20]
   d4266:	4798      	blx	r3
   d4268:	4604      	mov	r4, r0
  m_i2c.endTransmission();
   d426a:	6868      	ldr	r0, [r5, #4]
   d426c:	f000 fdd2 	bl	d4e14 <_ZN7TwoWire15endTransmissionEv>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d4270:	ea44 2006 	orr.w	r0, r4, r6, lsl #8

  return (float)level / 1.2f; // convert to lux
   d4274:	b284      	uxth	r4, r0
   d4276:	ee07 4a90 	vmov	s15, r4
   d427a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d427e:	eddf 7a02 	vldr	s15, [pc, #8]	; d4288 <_ZN6BH175015get_light_levelEv+0x48>
   d4282:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4286:	bd70      	pop	{r4, r5, r6, pc}
   d4288:	3f99999a 	.word	0x3f99999a

000d428c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d428c:	7803      	ldrb	r3, [r0, #0]
   d428e:	2b23      	cmp	r3, #35	; 0x23
   d4290:	d005      	beq.n	d429e <_ZN6BH175020wait_for_measurementEv+0x12>
   d4292:	2b13      	cmp	r3, #19
   d4294:	bf0c      	ite	eq
   d4296:	2018      	moveq	r0, #24
   d4298:	20b4      	movne	r0, #180	; 0xb4
   d429a:	f000 b9f7 	b.w	d468c <delay>
   d429e:	2018      	movs	r0, #24
   d42a0:	e7fb      	b.n	d429a <_ZN6BH175020wait_for_measurementEv+0xe>

000d42a2 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   d42a2:	b538      	push	{r3, r4, r5, lr}
   d42a4:	4604      	mov	r4, r0
   d42a6:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d42a8:	7841      	ldrb	r1, [r0, #1]
   d42aa:	6840      	ldr	r0, [r0, #4]
   d42ac:	f000 fdaa 	bl	d4e04 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d42b0:	6860      	ldr	r0, [r4, #4]
   d42b2:	6803      	ldr	r3, [r0, #0]
   d42b4:	4629      	mov	r1, r5
   d42b6:	689b      	ldr	r3, [r3, #8]
   d42b8:	4798      	blx	r3
  m_i2c.endTransmission();
   d42ba:	6860      	ldr	r0, [r4, #4]
   d42bc:	f000 fdaa 	bl	d4e14 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   d42c0:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   d42c2:	4620      	mov	r0, r4
}
   d42c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   d42c8:	f7ff bfe0 	b.w	d428c <_ZN6BH175020wait_for_measurementEv>

000d42cc <_ZN6BH175023make_forced_measurementEv>:
{
   d42cc:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   d42ce:	7803      	ldrb	r3, [r0, #0]
   d42d0:	f1a3 0220 	sub.w	r2, r3, #32
   d42d4:	2a01      	cmp	r2, #1
{
   d42d6:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   d42d8:	d901      	bls.n	d42de <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d42da:	2b23      	cmp	r3, #35	; 0x23
   d42dc:	d110      	bne.n	d4300 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   d42de:	7861      	ldrb	r1, [r4, #1]
   d42e0:	6860      	ldr	r0, [r4, #4]
   d42e2:	f000 fd8f 	bl	d4e04 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d42e6:	6860      	ldr	r0, [r4, #4]
   d42e8:	7821      	ldrb	r1, [r4, #0]
   d42ea:	6803      	ldr	r3, [r0, #0]
   d42ec:	689b      	ldr	r3, [r3, #8]
   d42ee:	4798      	blx	r3
    m_i2c.endTransmission();
   d42f0:	6860      	ldr	r0, [r4, #4]
   d42f2:	f000 fd8f 	bl	d4e14 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   d42f6:	4620      	mov	r0, r4
}
   d42f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   d42fc:	f7ff bfc6 	b.w	d428c <_ZN6BH175020wait_for_measurementEv>
}
   d4300:	bd10      	pop	{r4, pc}
	...

000d4304 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <os_mutex_recursive_create+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030248 	.word	0x00030248

000d4314 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <os_mutex_recursive_destroy+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030248 	.word	0x00030248

000d4324 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_RNG_GetRandomNumber+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	685b      	ldr	r3, [r3, #4]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030218 	.word	0x00030218

000d4334 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	695b      	ldr	r3, [r3, #20]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030218 	.word	0x00030218

000d4344 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <hal_i2c_begin+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	68db      	ldr	r3, [r3, #12]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030228 	.word	0x00030228

000d4354 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <hal_i2c_begin_transmission+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	699b      	ldr	r3, [r3, #24]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030228 	.word	0x00030228

000d4364 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <hal_i2c_end_transmission+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	69db      	ldr	r3, [r3, #28]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030228 	.word	0x00030228

000d4374 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <hal_i2c_write+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6a1b      	ldr	r3, [r3, #32]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030228 	.word	0x00030228

000d4384 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <hal_i2c_available+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030228 	.word	0x00030228

000d4394 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <hal_i2c_read+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030228 	.word	0x00030228

000d43a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <hal_i2c_peek+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030228 	.word	0x00030228

000d43b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <hal_i2c_flush+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030228 	.word	0x00030228

000d43c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <hal_i2c_is_enabled+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030228 	.word	0x00030228

000d43d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <hal_i2c_init+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030228 	.word	0x00030228

000d43e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <hal_i2c_request_ex+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030228 	.word	0x00030228

000d43f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <inet_inet_ntop+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030264 	.word	0x00030264

000d4404 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <netdb_freeaddrinfo+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	689b      	ldr	r3, [r3, #8]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030268 	.word	0x00030268

000d4414 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <netdb_getaddrinfo+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	68db      	ldr	r3, [r3, #12]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030268 	.word	0x00030268

000d4424 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <hal_usart_init+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	681b      	ldr	r3, [r3, #0]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <hal_usart_write+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	68db      	ldr	r3, [r3, #12]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <hal_usart_available+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	691b      	ldr	r3, [r3, #16]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <hal_usart_read+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <hal_usart_peek+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	699b      	ldr	r3, [r3, #24]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003023c 	.word	0x0003023c

000d4474 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <hal_usart_flush+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	69db      	ldr	r3, [r3, #28]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003023c 	.word	0x0003023c

000d4484 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <hal_usart_available_data_for_write+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003023c 	.word	0x0003023c

000d4494 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_USB_USART_Init+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003024c 	.word	0x0003024c

000d44a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USB_USART_Begin+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	685b      	ldr	r3, [r3, #4]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003024c 	.word	0x0003024c

000d44b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USB_USART_Available_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003024c 	.word	0x0003024c

000d44c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003024c 	.word	0x0003024c

000d44d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USB_USART_Receive_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	699b      	ldr	r3, [r3, #24]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003024c 	.word	0x0003024c

000d44e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USB_USART_Send_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003024c 	.word	0x0003024c

000d44f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USB_USART_Flush_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a1b      	ldr	r3, [r3, #32]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003024c 	.word	0x0003024c

000d4504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <set_system_mode+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	685b      	ldr	r3, [r3, #4]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030220 	.word	0x00030220

000d4514 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <system_delay_ms+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030220 	.word	0x00030220

000d4524 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <application_thread_current+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030220 	.word	0x00030220

000d4534 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <application_thread_invoke+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030220 	.word	0x00030220

000d4544 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b03      	ldr	r3, [pc, #12]	; (d4554 <system_ctrl_set_app_request_handler+0x10>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d454e:	9301      	str	r3, [sp, #4]
   d4550:	bd08      	pop	{r3, pc}
   d4552:	0000      	.short	0x0000
   d4554:	00030220 	.word	0x00030220

000d4558 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b03      	ldr	r3, [pc, #12]	; (d4568 <system_ctrl_set_result+0x10>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4562:	9301      	str	r3, [sp, #4]
   d4564:	bd08      	pop	{r3, pc}
   d4566:	0000      	.short	0x0000
   d4568:	00030220 	.word	0x00030220

000d456c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <spark_cloud_flag_connected+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	695b      	ldr	r3, [r3, #20]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030244 	.word	0x00030244

000d457c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <spark_send_event+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6a1b      	ldr	r3, [r3, #32]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030244 	.word	0x00030244

000d458c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030244 	.word	0x00030244

000d459c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_connect+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	685b      	ldr	r3, [r3, #4]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_connecting+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	689b      	ldr	r3, [r3, #8]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_disconnect+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	68db      	ldr	r3, [r3, #12]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_ready+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	691b      	ldr	r3, [r3, #16]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <network_on+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	695b      	ldr	r3, [r3, #20]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030240 	.word	0x00030240

000d45ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_off+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	699b      	ldr	r3, [r3, #24]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <network_listen+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	69db      	ldr	r3, [r3, #28]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030240 	.word	0x00030240

000d460c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <network_listening+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6a1b      	ldr	r3, [r3, #32]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030240 	.word	0x00030240

000d461c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <network_set_listen_timeout+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030240 	.word	0x00030240

000d462c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <network_get_listen_timeout+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030240 	.word	0x00030240

000d463c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <malloc+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	681b      	ldr	r3, [r3, #0]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003021c 	.word	0x0003021c

000d464c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <free+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	685b      	ldr	r3, [r3, #4]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003021c 	.word	0x0003021c

000d465c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <abort+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003021c 	.word	0x0003021c

000d466c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <_malloc_r+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003021c 	.word	0x0003021c

000d467c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <newlib_impure_ptr_callback+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003021c 	.word	0x0003021c

000d468c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d468c:	2100      	movs	r1, #0
   d468e:	f7ff bf41 	b.w	d4514 <system_delay_ms>

000d4692 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4692:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4694:	6883      	ldr	r3, [r0, #8]
   d4696:	4604      	mov	r4, r0
   d4698:	b90b      	cbnz	r3, d469e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d469a:	f001 f88c 	bl	d57b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d469e:	68c3      	ldr	r3, [r0, #12]
   d46a0:	4798      	blx	r3
      if (_M_manager)
   d46a2:	68a3      	ldr	r3, [r4, #8]
   d46a4:	b11b      	cbz	r3, d46ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d46a6:	2203      	movs	r2, #3
   d46a8:	4621      	mov	r1, r4
   d46aa:	4620      	mov	r0, r4
   d46ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d46ae:	4620      	mov	r0, r4
   d46b0:	2110      	movs	r1, #16
}
   d46b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d46b6:	f001 b87a 	b.w	d57ae <_ZdlPvj>

000d46ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46ba:	b510      	push	{r4, lr}
          _M_dispose();
   d46bc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46be:	4604      	mov	r4, r0
          _M_dispose();
   d46c0:	689b      	ldr	r3, [r3, #8]
   d46c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46c4:	68a3      	ldr	r3, [r4, #8]
   d46c6:	3b01      	subs	r3, #1
   d46c8:	60a3      	str	r3, [r4, #8]
   d46ca:	b92b      	cbnz	r3, d46d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d46cc:	6823      	ldr	r3, [r4, #0]
   d46ce:	4620      	mov	r0, r4
   d46d0:	68db      	ldr	r3, [r3, #12]
    }
   d46d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d46d6:	4718      	bx	r3
    }
   d46d8:	bd10      	pop	{r4, pc}

000d46da <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d46da:	b510      	push	{r4, lr}
   d46dc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d46de:	6800      	ldr	r0, [r0, #0]
   d46e0:	b108      	cbz	r0, d46e6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d46e2:	f7ff fe17 	bl	d4314 <os_mutex_recursive_destroy>
    }
   d46e6:	4620      	mov	r0, r4
   d46e8:	bd10      	pop	{r4, pc}

000d46ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d46ea:	680b      	ldr	r3, [r1, #0]
   d46ec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d46ee:	b113      	cbz	r3, d46f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d46f0:	685a      	ldr	r2, [r3, #4]
   d46f2:	3201      	adds	r2, #1
   d46f4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d46f6:	4770      	bx	lr

000d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d46f8:	b510      	push	{r4, lr}
   d46fa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d46fc:	6800      	ldr	r0, [r0, #0]
   d46fe:	b128      	cbz	r0, d470c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4700:	6843      	ldr	r3, [r0, #4]
   d4702:	3b01      	subs	r3, #1
   d4704:	6043      	str	r3, [r0, #4]
   d4706:	b90b      	cbnz	r3, d470c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4708:	f7ff ffd7 	bl	d46ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d470c:	4620      	mov	r0, r4
   d470e:	bd10      	pop	{r4, pc}

000d4710 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4710:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4712:	4c06      	ldr	r4, [pc, #24]	; (d472c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4714:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4716:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4718:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d471a:	f7ff fdf3 	bl	d4304 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d471e:	4620      	mov	r0, r4
   d4720:	4a03      	ldr	r2, [pc, #12]	; (d4730 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4722:	4904      	ldr	r1, [pc, #16]	; (d4734 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4728:	f001 b83c 	b.w	d57a4 <__aeabi_atexit>
   d472c:	2003e650 	.word	0x2003e650
   d4730:	2003e640 	.word	0x2003e640
   d4734:	000d46db 	.word	0x000d46db

000d4738 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4738:	4770      	bx	lr

000d473a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d473a:	2000      	movs	r0, #0
   d473c:	4770      	bx	lr

000d473e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d473e:	b510      	push	{r4, lr}
   d4740:	2110      	movs	r1, #16
   d4742:	4604      	mov	r4, r0
   d4744:	f001 f833 	bl	d57ae <_ZdlPvj>
   d4748:	4620      	mov	r0, r4
   d474a:	bd10      	pop	{r4, pc}

000d474c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d474c:	b508      	push	{r3, lr}
      { delete this; }
   d474e:	f7ff fff6 	bl	d473e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4752:	bd08      	pop	{r3, pc}

000d4754 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4754:	b510      	push	{r4, lr}
      if (_M_manager)
   d4756:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4758:	4604      	mov	r4, r0
      if (_M_manager)
   d475a:	b113      	cbz	r3, d4762 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d475c:	2203      	movs	r2, #3
   d475e:	4601      	mov	r1, r0
   d4760:	4798      	blx	r3
    }
   d4762:	4620      	mov	r0, r4
   d4764:	bd10      	pop	{r4, pc}

000d4766 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4766:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4768:	2200      	movs	r2, #0
   d476a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d476e:	6002      	str	r2, [r0, #0]
   d4770:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4772:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4774:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4776:	680c      	ldr	r4, [r1, #0]
   d4778:	8085      	strh	r5, [r0, #4]
   d477a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d477c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d477e:	bd30      	pop	{r4, r5, pc}

000d4780 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
    free((void*)msg_);
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	f7ff ff61 	bl	d464c <free>
}
   d478a:	4620      	mov	r0, r4
   d478c:	bd10      	pop	{r4, pc}

000d478e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d478e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4790:	68c4      	ldr	r4, [r0, #12]
   d4792:	b1f4      	cbz	r4, d47d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4794:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4796:	2b02      	cmp	r3, #2
   d4798:	d103      	bne.n	d47a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d479a:	f104 000c 	add.w	r0, r4, #12
   d479e:	f7ff ffef 	bl	d4780 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d47a2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d47a4:	b135      	cbz	r5, d47b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d47a6:	4628      	mov	r0, r5
   d47a8:	f7ff ffd4 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
   d47ac:	2110      	movs	r1, #16
   d47ae:	4628      	mov	r0, r5
   d47b0:	f000 fffd 	bl	d57ae <_ZdlPvj>
   d47b4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d47b6:	b135      	cbz	r5, d47c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d47b8:	4628      	mov	r0, r5
   d47ba:	f7ff ffcb 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
   d47be:	2110      	movs	r1, #16
   d47c0:	4628      	mov	r0, r5
   d47c2:	f000 fff4 	bl	d57ae <_ZdlPvj>
   d47c6:	4620      	mov	r0, r4
   d47c8:	2114      	movs	r1, #20
   d47ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d47ce:	f000 bfee 	b.w	d57ae <_ZdlPvj>
   d47d2:	bd38      	pop	{r3, r4, r5, pc}

000d47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d47d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d47d6:	460e      	mov	r6, r1
   d47d8:	4604      	mov	r4, r0
   d47da:	f856 3b04 	ldr.w	r3, [r6], #4
   d47de:	9300      	str	r3, [sp, #0]
   d47e0:	460d      	mov	r5, r1
   d47e2:	a801      	add	r0, sp, #4
   d47e4:	4631      	mov	r1, r6
   d47e6:	f7ff ff80 	bl	d46ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d47ea:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d47ec:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d47ee:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d47f0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d47f2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d47f4:	2300      	movs	r3, #0
   d47f6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d47f8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d47fa:	f7ff ff7d 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47fe:	4630      	mov	r0, r6
   d4800:	f7ff ff7a 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4804:	4628      	mov	r0, r5
   d4806:	2108      	movs	r1, #8
   d4808:	f000 ffd1 	bl	d57ae <_ZdlPvj>
        return p;
    }
   d480c:	4620      	mov	r0, r4
   d480e:	b002      	add	sp, #8
   d4810:	bd70      	pop	{r4, r5, r6, pc}

000d4812 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4812:	b513      	push	{r0, r1, r4, lr}
   d4814:	460b      	mov	r3, r1
   d4816:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4818:	e9d0 0100 	ldrd	r0, r1, [r0]
   d481c:	466c      	mov	r4, sp
   d481e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4822:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4826:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d482a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d482e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4832:	b002      	add	sp, #8
   d4834:	bd10      	pop	{r4, pc}

000d4836 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4836:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4838:	b510      	push	{r4, lr}
      if (_M_empty())
   d483a:	b90a      	cbnz	r2, d4840 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d483c:	f000 ffbb 	bl	d57b6 <_ZSt25__throw_bad_function_callv>
    }
   d4840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4844:	68c3      	ldr	r3, [r0, #12]
   d4846:	4718      	bx	r3

000d4848 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4848:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d484a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d484c:	f100 0110 	add.w	r1, r0, #16
   d4850:	f7ff fff1 	bl	d4836 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4854:	bd08      	pop	{r3, pc}

000d4856 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4856:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4858:	b510      	push	{r4, lr}
      if (_M_empty())
   d485a:	b90a      	cbnz	r2, d4860 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d485c:	f000 ffab 	bl	d57b6 <_ZSt25__throw_bad_function_callv>
    }
   d4860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4864:	68c3      	ldr	r3, [r0, #12]
   d4866:	4718      	bx	r3

000d4868 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4868:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d486a:	6800      	ldr	r0, [r0, #0]
   d486c:	f100 0110 	add.w	r1, r0, #16
   d4870:	f7ff fff1 	bl	d4856 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4874:	bd08      	pop	{r3, pc}
	...

000d4878 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4878:	b538      	push	{r3, r4, r5, lr}
   d487a:	2300      	movs	r3, #0
   d487c:	4604      	mov	r4, r0
   d487e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4880:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4882:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4884:	f7ff fc05 	bl	d4092 <_Znwj>
   d4888:	b128      	cbz	r0, d4896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d488a:	2301      	movs	r3, #1
   d488c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4890:	4b02      	ldr	r3, [pc, #8]	; (d489c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4892:	6003      	str	r3, [r0, #0]
   d4894:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4896:	6020      	str	r0, [r4, #0]
	}
   d4898:	4620      	mov	r0, r4
   d489a:	bd38      	pop	{r3, r4, r5, pc}
   d489c:	000d6238 	.word	0x000d6238

000d48a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d48a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d48a2:	2300      	movs	r3, #0
   d48a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d48a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d48a8:	4604      	mov	r4, r0
   d48aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d48ac:	b12b      	cbz	r3, d48ba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d48ae:	2202      	movs	r2, #2
   d48b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d48b2:	68eb      	ldr	r3, [r5, #12]
   d48b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d48b6:	68ab      	ldr	r3, [r5, #8]
   d48b8:	60a3      	str	r3, [r4, #8]
    }
   d48ba:	4620      	mov	r0, r4
   d48bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d48c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d48c2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d48c4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d48c6:	4668      	mov	r0, sp
   d48c8:	f7ff ff4d 	bl	d4766 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d48cc:	f04f 0302 	mov.w	r3, #2
   d48d0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d48d4:	2a00      	cmp	r2, #0
   d48d6:	d103      	bne.n	d48e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d48d8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d48dc:	2900      	cmp	r1, #0
   d48de:	d1f7      	bne.n	d48d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d48e0:	d125      	bne.n	d492e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d48e2:	f104 050c 	add.w	r5, r4, #12
   d48e6:	4669      	mov	r1, sp
   d48e8:	4628      	mov	r0, r5
   d48ea:	f7ff ff3c 	bl	d4766 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d48ee:	f3bf 8f5b 	dmb	ish
   d48f2:	2301      	movs	r3, #1
   d48f4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d48f6:	2000      	movs	r0, #0
   d48f8:	f104 0308 	add.w	r3, r4, #8
   d48fc:	f3bf 8f5b 	dmb	ish
   d4900:	e853 6f00 	ldrex	r6, [r3]
   d4904:	e843 0200 	strex	r2, r0, [r3]
   d4908:	2a00      	cmp	r2, #0
   d490a:	d1f9      	bne.n	d4900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d490c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4910:	b16e      	cbz	r6, d492e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4912:	f7ff fe07 	bl	d4524 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4916:	b178      	cbz	r0, d4938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4918:	4629      	mov	r1, r5
   d491a:	4630      	mov	r0, r6
   d491c:	f7ff ff8b 	bl	d4836 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4920:	4630      	mov	r0, r6
   d4922:	f7ff ff17 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4926:	2110      	movs	r1, #16
   d4928:	4630      	mov	r0, r6
   d492a:	f000 ff40 	bl	d57ae <_ZdlPvj>
        p_->setError(std::move(error));
   d492e:	4668      	mov	r0, sp
   d4930:	f7ff ff26 	bl	d4780 <_ZN8particle5ErrorD1Ev>
    }
   d4934:	b009      	add	sp, #36	; 0x24
   d4936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4938:	4631      	mov	r1, r6
   d493a:	a802      	add	r0, sp, #8
   d493c:	f7ff ffb0 	bl	d48a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4940:	68e0      	ldr	r0, [r4, #12]
   d4942:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4946:	b108      	cbz	r0, d494c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4948:	f001 fc34 	bl	d61b4 <strdup>
        type_(type) {
   d494c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d494e:	2010      	movs	r0, #16
   d4950:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4954:	f7ff fb9d 	bl	d4092 <_Znwj>
   d4958:	4605      	mov	r5, r0
   d495a:	b1e8      	cbz	r0, d4998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d495c:	2700      	movs	r7, #0
   d495e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4960:	2018      	movs	r0, #24
   d4962:	f7ff fb96 	bl	d4092 <_Znwj>
   d4966:	4604      	mov	r4, r0
   d4968:	b188      	cbz	r0, d498e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d496a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d496c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d496e:	a802      	add	r0, sp, #8
   d4970:	f7ff ff4f 	bl	d4812 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4974:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4976:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4978:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d497a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d497c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d497e:	a906      	add	r1, sp, #24
   d4980:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4982:	60e3      	str	r3, [r4, #12]
   d4984:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4988:	9205      	str	r2, [sp, #20]
   d498a:	f7ff feec 	bl	d4766 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d498e:	4b08      	ldr	r3, [pc, #32]	; (d49b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4990:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4992:	4b08      	ldr	r3, [pc, #32]	; (d49b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4994:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4996:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4998:	a806      	add	r0, sp, #24
   d499a:	f7ff fef1 	bl	d4780 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f7ff fed8 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d49a4:	2200      	movs	r2, #0
   d49a6:	4629      	mov	r1, r5
   d49a8:	4803      	ldr	r0, [pc, #12]	; (d49b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d49aa:	f7ff fdc3 	bl	d4534 <application_thread_invoke>
   d49ae:	e7b7      	b.n	d4920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d49b0:	000d4849 	.word	0x000d4849
   d49b4:	000d4ae1 	.word	0x000d4ae1
   d49b8:	000d4693 	.word	0x000d4693

000d49bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d49bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d49c0:	b08a      	sub	sp, #40	; 0x28
   d49c2:	4605      	mov	r5, r0
   d49c4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d49c8:	460c      	mov	r4, r1
   d49ca:	4617      	mov	r7, r2
   d49cc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49ce:	f7ff fdcd 	bl	d456c <spark_cloud_flag_connected>
   d49d2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d49d4:	4682      	mov	sl, r0
   d49d6:	bb38      	cbnz	r0, d4a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d49d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d49dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d49de:	a905      	add	r1, sp, #20
   d49e0:	4630      	mov	r0, r6
   d49e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d49e6:	f7ff febe 	bl	d4766 <_ZN8particle5ErrorC1EOS0_>
   d49ea:	2014      	movs	r0, #20
   d49ec:	f7ff fb51 	bl	d4092 <_Znwj>
   d49f0:	4604      	mov	r4, r0
   d49f2:	b148      	cbz	r0, d4a08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d49f4:	2302      	movs	r3, #2
   d49f6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49f8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d49fa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49fe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4a00:	4631      	mov	r1, r6
   d4a02:	300c      	adds	r0, #12
   d4a04:	f7ff feaf 	bl	d4766 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a08:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4a0a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a0c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4a10:	f7ff ff32 	bl	d4878 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a14:	4630      	mov	r0, r6
   d4a16:	f7ff feb3 	bl	d4780 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4a1a:	a805      	add	r0, sp, #20
   d4a1c:	f7ff feb0 	bl	d4780 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4a20:	4628      	mov	r0, r5
   d4a22:	b00a      	add	sp, #40	; 0x28
   d4a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a28:	230c      	movs	r3, #12
   d4a2a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4a2e:	2014      	movs	r0, #20
   d4a30:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4a34:	9307      	str	r3, [sp, #28]
   d4a36:	f7ff fb2c 	bl	d4092 <_Znwj>
   d4a3a:	4601      	mov	r1, r0
   d4a3c:	b128      	cbz	r0, d4a4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a3e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4a42:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a46:	f880 a001 	strb.w	sl, [r0, #1]
   d4a4a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a4c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4a4e:	f7ff ff13 	bl	d4878 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4a52:	4b22      	ldr	r3, [pc, #136]	; (d4adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4a54:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4a56:	2008      	movs	r0, #8
   d4a58:	f7ff fb1b 	bl	d4092 <_Znwj>
   d4a5c:	4682      	mov	sl, r0
   d4a5e:	b128      	cbz	r0, d4a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a60:	9b03      	ldr	r3, [sp, #12]
   d4a62:	f840 3b04 	str.w	r3, [r0], #4
   d4a66:	a904      	add	r1, sp, #16
   d4a68:	f7ff fe3f 	bl	d46ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4a6c:	9600      	str	r6, [sp, #0]
   d4a6e:	fa5f f389 	uxtb.w	r3, r9
   d4a72:	4642      	mov	r2, r8
   d4a74:	4639      	mov	r1, r7
   d4a76:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4a78:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4a7c:	f7ff fd7e 	bl	d457c <spark_send_event>
   d4a80:	b9b8      	cbnz	r0, d4ab2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4a82:	9b03      	ldr	r3, [sp, #12]
   d4a84:	785b      	ldrb	r3, [r3, #1]
   d4a86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4a8a:	b993      	cbnz	r3, d4ab2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4a8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4a90:	a905      	add	r1, sp, #20
   d4a92:	a803      	add	r0, sp, #12
   d4a94:	9205      	str	r2, [sp, #20]
   d4a96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4a9a:	f7ff ff11 	bl	d48c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4a9e:	a805      	add	r0, sp, #20
   d4aa0:	f7ff fe6e 	bl	d4780 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4aa4:	a805      	add	r0, sp, #20
   d4aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4aa8:	f7ff fe94 	bl	d47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4aac:	a806      	add	r0, sp, #24
   d4aae:	f7ff fe23 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ab2:	9b03      	ldr	r3, [sp, #12]
   d4ab4:	9305      	str	r3, [sp, #20]
   d4ab6:	a904      	add	r1, sp, #16
   d4ab8:	a806      	add	r0, sp, #24
   d4aba:	f7ff fe16 	bl	d46ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4abe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ac0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ac2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4ac4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4ac6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4ac8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4aca:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4acc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4ace:	f7ff fe13 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ad2:	a804      	add	r0, sp, #16
   d4ad4:	f7ff fe10 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4ad8:	e7a2      	b.n	d4a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4ada:	bf00      	nop
   d4adc:	000d4ba5 	.word	0x000d4ba5

000d4ae0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4ae0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ae4:	4605      	mov	r5, r0
	  switch (__op)
   d4ae6:	d007      	beq.n	d4af8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4ae8:	2a03      	cmp	r2, #3
   d4aea:	d018      	beq.n	d4b1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4aec:	2a01      	cmp	r2, #1
   d4aee:	d101      	bne.n	d4af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4af0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4af2:	6003      	str	r3, [r0, #0]
	}
   d4af4:	2000      	movs	r0, #0
   d4af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4af8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4afa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4afc:	f7ff fac9 	bl	d4092 <_Znwj>
   d4b00:	4604      	mov	r4, r0
   d4b02:	b150      	cbz	r0, d4b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4b04:	4631      	mov	r1, r6
   d4b06:	f7ff fecb 	bl	d48a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4b0a:	6930      	ldr	r0, [r6, #16]
   d4b0c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4b10:	b108      	cbz	r0, d4b16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4b12:	f001 fb4f 	bl	d61b4 <strdup>
        type_(type) {
   d4b16:	6120      	str	r0, [r4, #16]
   d4b18:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4b1a:	602c      	str	r4, [r5, #0]
	}
   d4b1c:	e7ea      	b.n	d4af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4b1e:	6804      	ldr	r4, [r0, #0]
   d4b20:	2c00      	cmp	r4, #0
   d4b22:	d0e7      	beq.n	d4af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4b24:	f104 0010 	add.w	r0, r4, #16
   d4b28:	f7ff fe2a 	bl	d4780 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	f7ff fe11 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4b32:	2118      	movs	r1, #24
   d4b34:	4620      	mov	r0, r4
   d4b36:	f000 fe3a 	bl	d57ae <_ZdlPvj>
   d4b3a:	e7db      	b.n	d4af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4b3c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4b3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4b3e:	2300      	movs	r3, #0
   d4b40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4b42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4b44:	4604      	mov	r4, r0
   d4b46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4b48:	b12b      	cbz	r3, d4b56 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b4a:	2202      	movs	r2, #2
   d4b4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b4e:	68eb      	ldr	r3, [r5, #12]
   d4b50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b52:	68ab      	ldr	r3, [r5, #8]
   d4b54:	60a3      	str	r3, [r4, #8]
    }
   d4b56:	4620      	mov	r0, r4
   d4b58:	bd38      	pop	{r3, r4, r5, pc}

000d4b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4b5a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b5c:	b570      	push	{r4, r5, r6, lr}
   d4b5e:	4604      	mov	r4, r0
	  switch (__op)
   d4b60:	d007      	beq.n	d4b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4b62:	2a03      	cmp	r2, #3
   d4b64:	d012      	beq.n	d4b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4b66:	2a01      	cmp	r2, #1
   d4b68:	d101      	bne.n	d4b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4b6a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b6c:	6003      	str	r3, [r0, #0]
	}
   d4b6e:	2000      	movs	r0, #0
   d4b70:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b72:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4b74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b76:	f7ff fa8c 	bl	d4092 <_Znwj>
   d4b7a:	4605      	mov	r5, r0
   d4b7c:	b120      	cbz	r0, d4b88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4b7e:	4631      	mov	r1, r6
   d4b80:	f7ff ffdc 	bl	d4b3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4b84:	7c33      	ldrb	r3, [r6, #16]
   d4b86:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4b88:	6025      	str	r5, [r4, #0]
	}
   d4b8a:	e7f0      	b.n	d4b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4b8c:	6804      	ldr	r4, [r0, #0]
   d4b8e:	2c00      	cmp	r4, #0
   d4b90:	d0ed      	beq.n	d4b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4b92:	4620      	mov	r0, r4
   d4b94:	f7ff fdde 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4b98:	2114      	movs	r1, #20
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	f000 fe07 	bl	d57ae <_ZdlPvj>
   d4ba0:	e7e5      	b.n	d4b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4ba6:	b089      	sub	sp, #36	; 0x24
   d4ba8:	4604      	mov	r4, r0
   d4baa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4bac:	a801      	add	r0, sp, #4
   d4bae:	4611      	mov	r1, r2
   d4bb0:	f7ff fe10 	bl	d47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4bb4:	b1a4      	cbz	r4, d4be0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4bb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4bb8:	b11d      	cbz	r5, d4bc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4bba:	4628      	mov	r0, r5
   d4bbc:	f001 fafa 	bl	d61b4 <strdup>
   d4bc0:	4605      	mov	r5, r0
   d4bc2:	a801      	add	r0, sp, #4
   d4bc4:	a903      	add	r1, sp, #12
        type_(type) {
   d4bc6:	9503      	str	r5, [sp, #12]
   d4bc8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4bcc:	f7ff fe78 	bl	d48c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4bd0:	a803      	add	r0, sp, #12
   d4bd2:	f7ff fdd5 	bl	d4780 <_ZN8particle5ErrorD1Ev>
   d4bd6:	a802      	add	r0, sp, #8
   d4bd8:	f7ff fd8e 	bl	d46f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4bdc:	b009      	add	sp, #36	; 0x24
   d4bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4be0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4be2:	2301      	movs	r3, #1
   d4be4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4be8:	2a00      	cmp	r2, #0
   d4bea:	d103      	bne.n	d4bf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4bec:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4bf0:	2900      	cmp	r1, #0
   d4bf2:	d1f7      	bne.n	d4be4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4bf4:	d1ef      	bne.n	d4bd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4bf6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4bf8:	f3bf 8f5b 	dmb	ish
   d4bfc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4bfe:	1d2b      	adds	r3, r5, #4
   d4c00:	f3bf 8f5b 	dmb	ish
   d4c04:	e853 6f00 	ldrex	r6, [r3]
   d4c08:	e843 4200 	strex	r2, r4, [r3]
   d4c0c:	2a00      	cmp	r2, #0
   d4c0e:	d1f9      	bne.n	d4c04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4c10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4c14:	2e00      	cmp	r6, #0
   d4c16:	d0de      	beq.n	d4bd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4c18:	4620      	mov	r0, r4
   d4c1a:	f7ff fc83 	bl	d4524 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4c1e:	4607      	mov	r7, r0
   d4c20:	b160      	cbz	r0, d4c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c22:	f105 010c 	add.w	r1, r5, #12
   d4c26:	4630      	mov	r0, r6
   d4c28:	f7ff fe15 	bl	d4856 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4c2c:	4630      	mov	r0, r6
   d4c2e:	f7ff fd91 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4c32:	2110      	movs	r1, #16
   d4c34:	4630      	mov	r0, r6
   d4c36:	f000 fdba 	bl	d57ae <_ZdlPvj>
   d4c3a:	e7cc      	b.n	d4bd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c3c:	4631      	mov	r1, r6
   d4c3e:	a803      	add	r0, sp, #12
   d4c40:	f7ff ff7c 	bl	d4b3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c44:	7b2b      	ldrb	r3, [r5, #12]
   d4c46:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c4a:	2010      	movs	r0, #16
   d4c4c:	f7ff fa21 	bl	d4092 <_Znwj>
   d4c50:	4605      	mov	r5, r0
   d4c52:	b1d0      	cbz	r0, d4c8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4c54:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c56:	2014      	movs	r0, #20
   d4c58:	f7ff fa1b 	bl	d4092 <_Znwj>
   d4c5c:	4604      	mov	r4, r0
   d4c5e:	b178      	cbz	r0, d4c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4c60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4c62:	4601      	mov	r1, r0
   d4c64:	a803      	add	r0, sp, #12
   d4c66:	f7ff fdd4 	bl	d4812 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c6e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c70:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4c72:	9205      	str	r2, [sp, #20]
   d4c74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c76:	60e3      	str	r3, [r4, #12]
   d4c78:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4c7c:	9206      	str	r2, [sp, #24]
   d4c7e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4c80:	4b06      	ldr	r3, [pc, #24]	; (d4c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4c82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c84:	4b06      	ldr	r3, [pc, #24]	; (d4ca0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c86:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4c88:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4c8a:	a803      	add	r0, sp, #12
   d4c8c:	f7ff fd62 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c90:	2200      	movs	r2, #0
   d4c92:	4629      	mov	r1, r5
   d4c94:	4803      	ldr	r0, [pc, #12]	; (d4ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4c96:	f7ff fc4d 	bl	d4534 <application_thread_invoke>
   d4c9a:	e7c7      	b.n	d4c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4c9c:	000d4869 	.word	0x000d4869
   d4ca0:	000d4b5b 	.word	0x000d4b5b
   d4ca4:	000d4693 	.word	0x000d4693

000d4ca8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ca8:	2200      	movs	r2, #0
   d4caa:	6840      	ldr	r0, [r0, #4]
   d4cac:	4611      	mov	r1, r2
   d4cae:	f7ff bcad 	b.w	d460c <network_listening>

000d4cb2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	4611      	mov	r1, r2
   d4cb8:	f7ff bcb8 	b.w	d462c <network_get_listen_timeout>

000d4cbc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4cbc:	6840      	ldr	r0, [r0, #4]
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	f7ff bcac 	b.w	d461c <network_set_listen_timeout>

000d4cc4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cc4:	6840      	ldr	r0, [r0, #4]
   d4cc6:	2200      	movs	r2, #0
   d4cc8:	f081 0101 	eor.w	r1, r1, #1
   d4ccc:	f7ff bc96 	b.w	d45fc <network_listen>

000d4cd0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4cd0:	2300      	movs	r3, #0
   d4cd2:	6840      	ldr	r0, [r0, #4]
   d4cd4:	461a      	mov	r2, r3
   d4cd6:	4619      	mov	r1, r3
   d4cd8:	f7ff bc88 	b.w	d45ec <network_off>

000d4cdc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4cdc:	2300      	movs	r3, #0
   d4cde:	6840      	ldr	r0, [r0, #4]
   d4ce0:	461a      	mov	r2, r3
   d4ce2:	4619      	mov	r1, r3
   d4ce4:	f7ff bc7a 	b.w	d45dc <network_on>

000d4ce8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ce8:	2200      	movs	r2, #0
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	4611      	mov	r1, r2
   d4cee:	f7ff bc6d 	b.w	d45cc <network_ready>

000d4cf2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	6840      	ldr	r0, [r0, #4]
   d4cf6:	4611      	mov	r1, r2
   d4cf8:	f7ff bc58 	b.w	d45ac <network_connecting>

000d4cfc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	2200      	movs	r2, #0
   d4d00:	2102      	movs	r1, #2
   d4d02:	f7ff bc5b 	b.w	d45bc <network_disconnect>

000d4d06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d06:	2300      	movs	r3, #0
   d4d08:	6840      	ldr	r0, [r0, #4]
   d4d0a:	461a      	mov	r2, r3
   d4d0c:	f7ff bc46 	b.w	d459c <network_connect>

000d4d10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d10:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d12:	2203      	movs	r2, #3
   d4d14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d16:	4a02      	ldr	r2, [pc, #8]	; (d4d20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d1a:	4770      	bx	lr
   d4d1c:	2003e654 	.word	0x2003e654
   d4d20:	000d6254 	.word	0x000d6254

000d4d24 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4d24:	4770      	bx	lr

000d4d26 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d28:	4606      	mov	r6, r0
   d4d2a:	4615      	mov	r5, r2
   d4d2c:	460c      	mov	r4, r1
   d4d2e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d30:	42bc      	cmp	r4, r7
   d4d32:	d006      	beq.n	d4d42 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d34:	6833      	ldr	r3, [r6, #0]
   d4d36:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d3a:	689b      	ldr	r3, [r3, #8]
   d4d3c:	4630      	mov	r0, r6
   d4d3e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4d40:	e7f6      	b.n	d4d30 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4d42:	4628      	mov	r0, r5
   d4d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d46 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4d46:	7c00      	ldrb	r0, [r0, #16]
   d4d48:	2200      	movs	r2, #0
   d4d4a:	f7ff bb13 	b.w	d4374 <hal_i2c_write>

000d4d4e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4d4e:	7c00      	ldrb	r0, [r0, #16]
   d4d50:	2100      	movs	r1, #0
   d4d52:	f7ff bb17 	b.w	d4384 <hal_i2c_available>

000d4d56 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4d56:	7c00      	ldrb	r0, [r0, #16]
   d4d58:	2100      	movs	r1, #0
   d4d5a:	f7ff bb1b 	b.w	d4394 <hal_i2c_read>

000d4d5e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4d5e:	7c00      	ldrb	r0, [r0, #16]
   d4d60:	2100      	movs	r1, #0
   d4d62:	f7ff bb1f 	b.w	d43a4 <hal_i2c_peek>

000d4d66 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4d66:	7c00      	ldrb	r0, [r0, #16]
   d4d68:	2100      	movs	r1, #0
   d4d6a:	f7ff bb23 	b.w	d43b4 <hal_i2c_flush>

000d4d6e <_ZN7TwoWireD0Ev>:
   d4d6e:	b510      	push	{r4, lr}
   d4d70:	2114      	movs	r1, #20
   d4d72:	4604      	mov	r4, r0
   d4d74:	f000 fd1b 	bl	d57ae <_ZdlPvj>
   d4d78:	4620      	mov	r0, r4
   d4d7a:	bd10      	pop	{r4, pc}

000d4d7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4d7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d82:	4604      	mov	r4, r0
   d4d84:	4608      	mov	r0, r1
   d4d86:	2100      	movs	r1, #0
   d4d88:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4d8c:	4b03      	ldr	r3, [pc, #12]	; (d4d9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4d8e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4d90:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4d92:	4611      	mov	r1, r2
   d4d94:	f7ff fb1e 	bl	d43d4 <hal_i2c_init>
}
   d4d98:	4620      	mov	r0, r4
   d4d9a:	bd10      	pop	{r4, pc}
   d4d9c:	000d6288 	.word	0x000d6288

000d4da0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4da0:	2300      	movs	r3, #0
   d4da2:	7c00      	ldrb	r0, [r0, #16]
   d4da4:	461a      	mov	r2, r3
   d4da6:	4619      	mov	r1, r3
   d4da8:	f7ff bacc 	b.w	d4344 <hal_i2c_begin>

000d4dac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4dac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d4dae:	2200      	movs	r2, #0
   d4db0:	2314      	movs	r3, #20
   d4db2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4db6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4dba:	780b      	ldrb	r3, [r1, #0]
   d4dbc:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dc0:	684b      	ldr	r3, [r1, #4]
   d4dc2:	9303      	str	r3, [sp, #12]
   d4dc4:	68cb      	ldr	r3, [r1, #12]
   d4dc6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4dc8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4dca:	7a0b      	ldrb	r3, [r1, #8]
   d4dcc:	9305      	str	r3, [sp, #20]
   d4dce:	a901      	add	r1, sp, #4
   d4dd0:	f7ff fb08 	bl	d43e4 <hal_i2c_request_ex>
}
   d4dd4:	b007      	add	sp, #28
   d4dd6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dda <_ZN7TwoWire11requestFromEhjh>:
{
   d4dda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4ddc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4dde:	f88d 1000 	strb.w	r1, [sp]
   d4de2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4de6:	9103      	str	r1, [sp, #12]
   d4de8:	bf18      	it	ne
   d4dea:	2301      	movne	r3, #1
   d4dec:	4669      	mov	r1, sp
    size_ = size;
   d4dee:	9201      	str	r2, [sp, #4]
   d4df0:	f88d 3008 	strb.w	r3, [sp, #8]
   d4df4:	f7ff ffda 	bl	d4dac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4df8:	b005      	add	sp, #20
   d4dfa:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dfe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d4dfe:	2301      	movs	r3, #1
   d4e00:	f7ff bfeb 	b.w	d4dda <_ZN7TwoWire11requestFromEhjh>

000d4e04 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4e04:	7c00      	ldrb	r0, [r0, #16]
   d4e06:	2200      	movs	r2, #0
   d4e08:	f7ff baa4 	b.w	d4354 <hal_i2c_begin_transmission>

000d4e0c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4e0c:	7c00      	ldrb	r0, [r0, #16]
   d4e0e:	2200      	movs	r2, #0
   d4e10:	f7ff baa8 	b.w	d4364 <hal_i2c_end_transmission>

000d4e14 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4e14:	2101      	movs	r1, #1
   d4e16:	f7ff bff9 	b.w	d4e0c <_ZN7TwoWire15endTransmissionEh>

000d4e1a <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d4e1a:	7c00      	ldrb	r0, [r0, #16]
   d4e1c:	2100      	movs	r1, #0
   d4e1e:	f7ff bad1 	b.w	d43c4 <hal_i2c_is_enabled>

000d4e22 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e22:	4770      	bx	lr

000d4e24 <_ZN9IPAddressD0Ev>:
   d4e24:	b510      	push	{r4, lr}
   d4e26:	2118      	movs	r1, #24
   d4e28:	4604      	mov	r4, r0
   d4e2a:	f000 fcc0 	bl	d57ae <_ZdlPvj>
   d4e2e:	4620      	mov	r0, r4
   d4e30:	bd10      	pop	{r4, pc}

000d4e32 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e32:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e34:	7d03      	ldrb	r3, [r0, #20]
   d4e36:	2b06      	cmp	r3, #6
{
   d4e38:	b08d      	sub	sp, #52	; 0x34
   d4e3a:	460e      	mov	r6, r1
   d4e3c:	f100 0704 	add.w	r7, r0, #4
   d4e40:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e44:	d012      	beq.n	d4e6c <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e46:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e4e:	220a      	movs	r2, #10
   d4e50:	4630      	mov	r0, r6
   d4e52:	f000 f944 	bl	d50de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e56:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e58:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e5a:	d019      	beq.n	d4e90 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e5c:	2c00      	cmp	r4, #0
   d4e5e:	d0f4      	beq.n	d4e4a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e60:	212e      	movs	r1, #46	; 0x2e
   d4e62:	4630      	mov	r0, r6
   d4e64:	f000 f92c 	bl	d50c0 <_ZN5Print5printEc>
   d4e68:	4404      	add	r4, r0
   d4e6a:	e7ee      	b.n	d4e4a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e6c:	232f      	movs	r3, #47	; 0x2f
   d4e6e:	466a      	mov	r2, sp
   d4e70:	4639      	mov	r1, r7
   d4e72:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e74:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e78:	f7ff fabc 	bl	d43f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e7c:	4668      	mov	r0, sp
   d4e7e:	f001 f9b6 	bl	d61ee <strlen>
   d4e82:	6833      	ldr	r3, [r6, #0]
   d4e84:	4602      	mov	r2, r0
   d4e86:	68db      	ldr	r3, [r3, #12]
   d4e88:	4669      	mov	r1, sp
   d4e8a:	4630      	mov	r0, r6
   d4e8c:	4798      	blx	r3
   d4e8e:	4604      	mov	r4, r0
    }
    return n;
}
   d4e90:	4620      	mov	r0, r4
   d4e92:	b00d      	add	sp, #52	; 0x34
   d4e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4e98:	b510      	push	{r4, lr}
   d4e9a:	4b05      	ldr	r3, [pc, #20]	; (d4eb0 <_ZN9IPAddressC1Ev+0x18>)
   d4e9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e9e:	2211      	movs	r2, #17
   d4ea0:	f840 3b04 	str.w	r3, [r0], #4
   d4ea4:	2100      	movs	r1, #0
   d4ea6:	f001 f959 	bl	d615c <memset>
}
   d4eaa:	4620      	mov	r0, r4
   d4eac:	bd10      	pop	{r4, pc}
   d4eae:	bf00      	nop
   d4eb0:	000d62b0 	.word	0x000d62b0

000d4eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4eb4:	4603      	mov	r3, r0
   d4eb6:	4a07      	ldr	r2, [pc, #28]	; (d4ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4ebe:	f101 0210 	add.w	r2, r1, #16
   d4ec2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ec6:	f843 4b04 	str.w	r4, [r3], #4
   d4eca:	4291      	cmp	r1, r2
   d4ecc:	d1f9      	bne.n	d4ec2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ece:	780a      	ldrb	r2, [r1, #0]
   d4ed0:	701a      	strb	r2, [r3, #0]
}
   d4ed2:	bd10      	pop	{r4, pc}
   d4ed4:	000d62b0 	.word	0x000d62b0

000d4ed8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ed8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4eda:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ede:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ee2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ee6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4eea:	2304      	movs	r3, #4
   d4eec:	6041      	str	r1, [r0, #4]
   d4eee:	7503      	strb	r3, [r0, #20]
}
   d4ef0:	bd10      	pop	{r4, pc}

000d4ef2 <_ZN9IPAddressaSEPKh>:
{
   d4ef2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ef4:	78cb      	ldrb	r3, [r1, #3]
   d4ef6:	9300      	str	r3, [sp, #0]
   d4ef8:	788b      	ldrb	r3, [r1, #2]
   d4efa:	784a      	ldrb	r2, [r1, #1]
   d4efc:	7809      	ldrb	r1, [r1, #0]
   d4efe:	f7ff ffeb 	bl	d4ed8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f02:	b002      	add	sp, #8
   d4f04:	bd10      	pop	{r4, pc}
	...

000d4f08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f08:	4b01      	ldr	r3, [pc, #4]	; (d4f10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f0a:	4a02      	ldr	r2, [pc, #8]	; (d4f14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f0e:	4770      	bx	lr
   d4f10:	2003e65c 	.word	0x2003e65c
   d4f14:	000d62bc 	.word	0x000d62bc

000d4f18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f18:	2300      	movs	r3, #0
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	461a      	mov	r2, r3
   d4f1e:	f7ff bb3d 	b.w	d459c <network_connect>

000d4f22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	2200      	movs	r2, #0
   d4f26:	2102      	movs	r1, #2
   d4f28:	f7ff bb48 	b.w	d45bc <network_disconnect>

000d4f2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f2c:	2200      	movs	r2, #0
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	4611      	mov	r1, r2
   d4f32:	f7ff bb3b 	b.w	d45ac <network_connecting>

000d4f36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f36:	2200      	movs	r2, #0
   d4f38:	6840      	ldr	r0, [r0, #4]
   d4f3a:	4611      	mov	r1, r2
   d4f3c:	f7ff bb46 	b.w	d45cc <network_ready>

000d4f40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f40:	2300      	movs	r3, #0
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	461a      	mov	r2, r3
   d4f46:	4619      	mov	r1, r3
   d4f48:	f7ff bb48 	b.w	d45dc <network_on>

000d4f4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f4c:	2300      	movs	r3, #0
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	461a      	mov	r2, r3
   d4f52:	4619      	mov	r1, r3
   d4f54:	f7ff bb4a 	b.w	d45ec <network_off>

000d4f58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f58:	6840      	ldr	r0, [r0, #4]
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	f081 0101 	eor.w	r1, r1, #1
   d4f60:	f7ff bb4c 	b.w	d45fc <network_listen>

000d4f64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f64:	6840      	ldr	r0, [r0, #4]
   d4f66:	2200      	movs	r2, #0
   d4f68:	f7ff bb58 	b.w	d461c <network_set_listen_timeout>

000d4f6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f6c:	2200      	movs	r2, #0
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	4611      	mov	r1, r2
   d4f72:	f7ff bb5b 	b.w	d462c <network_get_listen_timeout>

000d4f76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f76:	2200      	movs	r2, #0
   d4f78:	6840      	ldr	r0, [r0, #4]
   d4f7a:	4611      	mov	r1, r2
   d4f7c:	f7ff bb46 	b.w	d460c <network_listening>

000d4f80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f84:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4f86:	b095      	sub	sp, #84	; 0x54
   d4f88:	4616      	mov	r6, r2
   d4f8a:	460d      	mov	r5, r1
   d4f8c:	4607      	mov	r7, r0
    IPAddress addr;
   d4f8e:	f7ff ff83 	bl	d4e98 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4f92:	4621      	mov	r1, r4
   d4f94:	2218      	movs	r2, #24
   d4f96:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4f98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4f9a:	f001 f8df 	bl	d615c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4f9e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4fa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4fa4:	4621      	mov	r1, r4
   d4fa6:	466b      	mov	r3, sp
   d4fa8:	aa0c      	add	r2, sp, #48	; 0x30
   d4faa:	4630      	mov	r0, r6
   d4fac:	f7ff fa32 	bl	d4414 <netdb_getaddrinfo>
    if (!r) {
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	2800      	cmp	r0, #0
   d4fb4:	d146      	bne.n	d5044 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fb6:	4602      	mov	r2, r0
   d4fb8:	2101      	movs	r1, #1
   d4fba:	6868      	ldr	r0, [r5, #4]
   d4fbc:	f7ff fb06 	bl	d45cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fc0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fc2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fc4:	4622      	mov	r2, r4
   d4fc6:	6868      	ldr	r0, [r5, #4]
   d4fc8:	f7ff fb00 	bl	d45cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fcc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fce:	4681      	mov	r9, r0
        bool ok = false;
   d4fd0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fd2:	2e00      	cmp	r6, #0
   d4fd4:	d036      	beq.n	d5044 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4fd6:	2900      	cmp	r1, #0
   d4fd8:	d134      	bne.n	d5044 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4fda:	6873      	ldr	r3, [r6, #4]
   d4fdc:	2b02      	cmp	r3, #2
   d4fde:	d003      	beq.n	d4fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4fe0:	2b0a      	cmp	r3, #10
   d4fe2:	d00b      	beq.n	d4ffc <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fe4:	69f6      	ldr	r6, [r6, #28]
   d4fe6:	e7f4      	b.n	d4fd2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4fe8:	f1b8 0f00 	cmp.w	r8, #0
   d4fec:	d004      	beq.n	d4ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4fee:	6971      	ldr	r1, [r6, #20]
   d4ff0:	4638      	mov	r0, r7
   d4ff2:	3104      	adds	r1, #4
   d4ff4:	f7ff ff7d 	bl	d4ef2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4ff8:	4641      	mov	r1, r8
   d4ffa:	e7f3      	b.n	d4fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ffc:	f1b9 0f00 	cmp.w	r9, #0
   d5000:	d101      	bne.n	d5006 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5002:	4649      	mov	r1, r9
   d5004:	e7ee      	b.n	d4fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5006:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5008:	2210      	movs	r2, #16
   d500a:	a801      	add	r0, sp, #4
   d500c:	f001 f8a6 	bl	d615c <memset>
                    a.v = 6;
   d5010:	2306      	movs	r3, #6
   d5012:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5016:	ad01      	add	r5, sp, #4
   d5018:	f104 0308 	add.w	r3, r4, #8
   d501c:	3418      	adds	r4, #24
   d501e:	6818      	ldr	r0, [r3, #0]
   d5020:	6859      	ldr	r1, [r3, #4]
   d5022:	462a      	mov	r2, r5
   d5024:	c203      	stmia	r2!, {r0, r1}
   d5026:	3308      	adds	r3, #8
   d5028:	42a3      	cmp	r3, r4
   d502a:	4615      	mov	r5, r2
   d502c:	d1f7      	bne.n	d501e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d502e:	a901      	add	r1, sp, #4
   d5030:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5032:	ad07      	add	r5, sp, #28
   d5034:	f7ff ff3e 	bl	d4eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d503a:	1d3c      	adds	r4, r7, #4
   d503c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d503e:	682b      	ldr	r3, [r5, #0]
   d5040:	7023      	strb	r3, [r4, #0]
   d5042:	e7de      	b.n	d5002 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5044:	9800      	ldr	r0, [sp, #0]
   d5046:	f7ff f9dd 	bl	d4404 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d504a:	4638      	mov	r0, r7
   d504c:	b015      	add	sp, #84	; 0x54
   d504e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5054 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5054:	4b02      	ldr	r3, [pc, #8]	; (d5060 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5056:	4a03      	ldr	r2, [pc, #12]	; (d5064 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5058:	601a      	str	r2, [r3, #0]
   d505a:	2200      	movs	r2, #0
   d505c:	605a      	str	r2, [r3, #4]

} // spark
   d505e:	4770      	bx	lr
   d5060:	2003e660 	.word	0x2003e660
   d5064:	000d62c8 	.word	0x000d62c8

000d5068 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d506a:	4606      	mov	r6, r0
   d506c:	460d      	mov	r5, r1
  size_t n = 0;
   d506e:	188f      	adds	r7, r1, r2
   d5070:	2400      	movs	r4, #0
  while (size--) {
   d5072:	42bd      	cmp	r5, r7
   d5074:	d00c      	beq.n	d5090 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5076:	6833      	ldr	r3, [r6, #0]
   d5078:	f815 1b01 	ldrb.w	r1, [r5], #1
   d507c:	689b      	ldr	r3, [r3, #8]
   d507e:	4630      	mov	r0, r6
   d5080:	4798      	blx	r3
     if (chunk>=0)
   d5082:	1e03      	subs	r3, r0, #0
   d5084:	db01      	blt.n	d508a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5086:	441c      	add	r4, r3
  while (size--) {
   d5088:	e7f3      	b.n	d5072 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d508a:	2c00      	cmp	r4, #0
   d508c:	bf08      	it	eq
   d508e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5090:	4620      	mov	r0, r4
   d5092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5094 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5094:	b513      	push	{r0, r1, r4, lr}
   d5096:	4604      	mov	r4, r0
    }
   d5098:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d509a:	b159      	cbz	r1, d50b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d509c:	9101      	str	r1, [sp, #4]
   d509e:	f001 f8a6 	bl	d61ee <strlen>
   d50a2:	6823      	ldr	r3, [r4, #0]
   d50a4:	9901      	ldr	r1, [sp, #4]
   d50a6:	68db      	ldr	r3, [r3, #12]
   d50a8:	4602      	mov	r2, r0
   d50aa:	4620      	mov	r0, r4
    }
   d50ac:	b002      	add	sp, #8
   d50ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d50b2:	4718      	bx	r3
    }
   d50b4:	b002      	add	sp, #8
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d50b8:	b508      	push	{r3, lr}
  return write(str);
   d50ba:	f7ff ffeb 	bl	d5094 <_ZN5Print5writeEPKc>
}
   d50be:	bd08      	pop	{r3, pc}

000d50c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d50c0:	6803      	ldr	r3, [r0, #0]
   d50c2:	689b      	ldr	r3, [r3, #8]
   d50c4:	4718      	bx	r3

000d50c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50c8:	210d      	movs	r1, #13
{
   d50ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50cc:	f7ff fff8 	bl	d50c0 <_ZN5Print5printEc>
  n += print('\n');
   d50d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d50d2:	4604      	mov	r4, r0
  n += print('\n');
   d50d4:	4628      	mov	r0, r5
   d50d6:	f7ff fff3 	bl	d50c0 <_ZN5Print5printEc>
  return n;
}
   d50da:	4420      	add	r0, r4
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50de:	b530      	push	{r4, r5, lr}
   d50e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50e2:	2300      	movs	r3, #0
   d50e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50e8:	2a01      	cmp	r2, #1
   d50ea:	bf98      	it	ls
   d50ec:	220a      	movls	r2, #10
   d50ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d50f0:	460d      	mov	r5, r1
   d50f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d50f6:	fb01 5312 	mls	r3, r1, r2, r5
   d50fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50fe:	2b09      	cmp	r3, #9
   d5100:	bf94      	ite	ls
   d5102:	3330      	addls	r3, #48	; 0x30
   d5104:	3337      	addhi	r3, #55	; 0x37
   d5106:	b2db      	uxtb	r3, r3
  } while(n);
   d5108:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d510a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d510e:	d9ef      	bls.n	d50f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5110:	4621      	mov	r1, r4
   d5112:	f7ff ffbf 	bl	d5094 <_ZN5Print5writeEPKc>
}
   d5116:	b00b      	add	sp, #44	; 0x2c
   d5118:	bd30      	pop	{r4, r5, pc}
	...

000d511c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d511c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5120:	ec55 4b10 	vmov	r4, r5, d0
   d5124:	4606      	mov	r6, r0
   d5126:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5128:	ee10 2a10 	vmov	r2, s0
   d512c:	ee10 0a10 	vmov	r0, s0
   d5130:	462b      	mov	r3, r5
   d5132:	4629      	mov	r1, r5
   d5134:	f000 ff98 	bl	d6068 <__aeabi_dcmpun>
   d5138:	b140      	cbz	r0, d514c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d513a:	4953      	ldr	r1, [pc, #332]	; (d5288 <_ZN5Print10printFloatEdh+0x16c>)
   d513c:	4630      	mov	r0, r6
   d513e:	f7ff ffa9 	bl	d5094 <_ZN5Print5writeEPKc>
   d5142:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5144:	4650      	mov	r0, sl
   d5146:	b003      	add	sp, #12
   d5148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d514c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5150:	4b4e      	ldr	r3, [pc, #312]	; (d528c <_ZN5Print10printFloatEdh+0x170>)
   d5152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5156:	4620      	mov	r0, r4
   d5158:	4649      	mov	r1, r9
   d515a:	f000 ff85 	bl	d6068 <__aeabi_dcmpun>
   d515e:	b948      	cbnz	r0, d5174 <_ZN5Print10printFloatEdh+0x58>
   d5160:	4b4a      	ldr	r3, [pc, #296]	; (d528c <_ZN5Print10printFloatEdh+0x170>)
   d5162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5166:	4620      	mov	r0, r4
   d5168:	4649      	mov	r1, r9
   d516a:	f000 ff5f 	bl	d602c <__aeabi_dcmple>
   d516e:	b908      	cbnz	r0, d5174 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5170:	4947      	ldr	r1, [pc, #284]	; (d5290 <_ZN5Print10printFloatEdh+0x174>)
   d5172:	e7e3      	b.n	d513c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5174:	4b47      	ldr	r3, [pc, #284]	; (d5294 <_ZN5Print10printFloatEdh+0x178>)
   d5176:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d517a:	4620      	mov	r0, r4
   d517c:	4629      	mov	r1, r5
   d517e:	f000 ff69 	bl	d6054 <__aeabi_dcmpgt>
   d5182:	b108      	cbz	r0, d5188 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5184:	4944      	ldr	r1, [pc, #272]	; (d5298 <_ZN5Print10printFloatEdh+0x17c>)
   d5186:	e7d9      	b.n	d513c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5188:	4b44      	ldr	r3, [pc, #272]	; (d529c <_ZN5Print10printFloatEdh+0x180>)
   d518a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d518e:	4620      	mov	r0, r4
   d5190:	4629      	mov	r1, r5
   d5192:	f000 ff41 	bl	d6018 <__aeabi_dcmplt>
   d5196:	2800      	cmp	r0, #0
   d5198:	d1f4      	bne.n	d5184 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d519a:	2200      	movs	r2, #0
   d519c:	2300      	movs	r3, #0
   d519e:	4620      	mov	r0, r4
   d51a0:	4629      	mov	r1, r5
   d51a2:	f000 ff39 	bl	d6018 <__aeabi_dcmplt>
   d51a6:	b1d0      	cbz	r0, d51de <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d51a8:	212d      	movs	r1, #45	; 0x2d
   d51aa:	4630      	mov	r0, r6
   d51ac:	f7ff ff88 	bl	d50c0 <_ZN5Print5printEc>
     number = -number;
   d51b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d51b4:	4682      	mov	sl, r0
     number = -number;
   d51b6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d51b8:	4939      	ldr	r1, [pc, #228]	; (d52a0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d51ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d52a8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d51be:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d51c2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d51c4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d51c8:	fa5f f38b 	uxtb.w	r3, fp
   d51cc:	429f      	cmp	r7, r3
   d51ce:	d908      	bls.n	d51e2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d51d0:	4642      	mov	r2, r8
   d51d2:	464b      	mov	r3, r9
   d51d4:	f000 fdd8 	bl	d5d88 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d51d8:	f10b 0b01 	add.w	fp, fp, #1
   d51dc:	e7f4      	b.n	d51c8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d51de:	4682      	mov	sl, r0
   d51e0:	e7ea      	b.n	d51b8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d51e2:	4622      	mov	r2, r4
   d51e4:	462b      	mov	r3, r5
   d51e6:	f000 faef 	bl	d57c8 <__adddf3>
   d51ea:	460d      	mov	r5, r1
   d51ec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d51ee:	f000 ff79 	bl	d60e4 <__aeabi_d2uiz>
   d51f2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d51f4:	f000 fc24 	bl	d5a40 <__aeabi_ui2d>
   d51f8:	4602      	mov	r2, r0
   d51fa:	460b      	mov	r3, r1
   d51fc:	4620      	mov	r0, r4
   d51fe:	4629      	mov	r1, r5
   d5200:	f000 fae0 	bl	d57c4 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d5204:	220a      	movs	r2, #10
   d5206:	4604      	mov	r4, r0
   d5208:	460d      	mov	r5, r1
   d520a:	4630      	mov	r0, r6
   d520c:	4641      	mov	r1, r8
   d520e:	f7ff ff66 	bl	d50de <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5212:	4482      	add	sl, r0
  if (digits > 0) {
   d5214:	b127      	cbz	r7, d5220 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5216:	4923      	ldr	r1, [pc, #140]	; (d52a4 <_ZN5Print10printFloatEdh+0x188>)
   d5218:	4630      	mov	r0, r6
   d521a:	f7ff ff3b 	bl	d5094 <_ZN5Print5writeEPKc>
    n += print(".");
   d521e:	4482      	add	sl, r0
    remainder *= 10.0;
   d5220:	f8df 9084 	ldr.w	r9, [pc, #132]	; d52a8 <_ZN5Print10printFloatEdh+0x18c>
   d5224:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5228:	3f01      	subs	r7, #1
   d522a:	b2ff      	uxtb	r7, r7
   d522c:	2fff      	cmp	r7, #255	; 0xff
   d522e:	d089      	beq.n	d5144 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5230:	4642      	mov	r2, r8
   d5232:	464b      	mov	r3, r9
   d5234:	4620      	mov	r0, r4
   d5236:	4629      	mov	r1, r5
   d5238:	f000 fc7c 	bl	d5b34 <__aeabi_dmul>
   d523c:	4604      	mov	r4, r0
   d523e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5240:	f000 ff28 	bl	d6094 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5244:	f1b0 0b00 	subs.w	fp, r0, #0
   d5248:	da1a      	bge.n	d5280 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d524a:	212d      	movs	r1, #45	; 0x2d
   d524c:	4630      	mov	r0, r6
   d524e:	f7ff ff37 	bl	d50c0 <_ZN5Print5printEc>
            val = -n;
   d5252:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5256:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5258:	220a      	movs	r2, #10
   d525a:	4630      	mov	r0, r6
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	f7ff ff3e 	bl	d50de <_ZN5Print11printNumberEmh>
   d5262:	9b01      	ldr	r3, [sp, #4]
   d5264:	4418      	add	r0, r3
    n += print(toPrint);
   d5266:	4482      	add	sl, r0
    remainder -= toPrint;
   d5268:	4658      	mov	r0, fp
   d526a:	f000 fbf9 	bl	d5a60 <__aeabi_i2d>
   d526e:	4602      	mov	r2, r0
   d5270:	460b      	mov	r3, r1
   d5272:	4620      	mov	r0, r4
   d5274:	4629      	mov	r1, r5
   d5276:	f000 faa5 	bl	d57c4 <__aeabi_dsub>
   d527a:	4604      	mov	r4, r0
   d527c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d527e:	e7d3      	b.n	d5228 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5280:	4659      	mov	r1, fp
        size_t t = 0;
   d5282:	2300      	movs	r3, #0
   d5284:	e7e8      	b.n	d5258 <_ZN5Print10printFloatEdh+0x13c>
   d5286:	bf00      	nop
   d5288:	000d62f4 	.word	0x000d62f4
   d528c:	7fefffff 	.word	0x7fefffff
   d5290:	000d62f8 	.word	0x000d62f8
   d5294:	41efffff 	.word	0x41efffff
   d5298:	000d62fc 	.word	0x000d62fc
   d529c:	c1efffff 	.word	0xc1efffff
   d52a0:	3fe00000 	.word	0x3fe00000
   d52a4:	000d6300 	.word	0x000d6300
   d52a8:	40240000 	.word	0x40240000

000d52ac <_ZN5Print7printlnEdi>:
{
   d52ac:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d52ae:	b2c9      	uxtb	r1, r1
{
   d52b0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d52b2:	f7ff ff33 	bl	d511c <_ZN5Print10printFloatEdh>
   d52b6:	4604      	mov	r4, r0
  n += println();
   d52b8:	4628      	mov	r0, r5
   d52ba:	f7ff ff04 	bl	d50c6 <_ZN5Print7printlnEv>
}
   d52be:	4420      	add	r0, r4
   d52c0:	bd38      	pop	{r3, r4, r5, pc}

000d52c2 <_ZN5Print7printlnEfi>:
{
   d52c2:	b538      	push	{r3, r4, r5, lr}
   d52c4:	4604      	mov	r4, r0
   d52c6:	ee10 0a10 	vmov	r0, s0
   d52ca:	460d      	mov	r5, r1
    return println((double)num, digits);
   d52cc:	f000 fbda 	bl	d5a84 <__aeabi_f2d>
   d52d0:	ec41 0b10 	vmov	d0, r0, r1
   d52d4:	4629      	mov	r1, r5
   d52d6:	4620      	mov	r0, r4
}
   d52d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d52dc:	f7ff bfe6 	b.w	d52ac <_ZN5Print7printlnEdi>

000d52e0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d52e0:	b510      	push	{r4, lr}
   d52e2:	4604      	mov	r4, r0
   d52e4:	f7ff fa36 	bl	d4754 <_ZNSt14_Function_baseD1Ev>
   d52e8:	4620      	mov	r0, r4
   d52ea:	bd10      	pop	{r4, pc}

000d52ec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d52ec:	4803      	ldr	r0, [pc, #12]	; (d52fc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d52ee:	4a04      	ldr	r2, [pc, #16]	; (d5300 <_GLOBAL__sub_I_RGB+0x14>)
   d52f0:	4904      	ldr	r1, [pc, #16]	; (d5304 <_GLOBAL__sub_I_RGB+0x18>)
   d52f2:	2300      	movs	r3, #0
   d52f4:	6083      	str	r3, [r0, #8]
   d52f6:	f000 ba55 	b.w	d57a4 <__aeabi_atexit>
   d52fa:	bf00      	nop
   d52fc:	2003e668 	.word	0x2003e668
   d5300:	2003e640 	.word	0x2003e640
   d5304:	000d52e1 	.word	0x000d52e1

000d5308 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5308:	b510      	push	{r4, lr}
   d530a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d530c:	6800      	ldr	r0, [r0, #0]
   d530e:	b118      	cbz	r0, d5318 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5310:	f7ff f99c 	bl	d464c <free>
            wakeupSource_ = nullptr;
   d5314:	2300      	movs	r3, #0
   d5316:	6023      	str	r3, [r4, #0]
        }
    }
   d5318:	bd10      	pop	{r4, pc}

000d531a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d531a:	b510      	push	{r4, lr}
   d531c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d531e:	f7ff fff3 	bl	d5308 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5322:	4620      	mov	r0, r4
   d5324:	bd10      	pop	{r4, pc}
	...

000d5328 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5328:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d532a:	4b09      	ldr	r3, [pc, #36]	; (d5350 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d532c:	4c09      	ldr	r4, [pc, #36]	; (d5354 <_GLOBAL__sub_I_System+0x2c>)
   d532e:	2202      	movs	r2, #2
   d5330:	2000      	movs	r0, #0
   d5332:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5334:	4b08      	ldr	r3, [pc, #32]	; (d5358 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5336:	6020      	str	r0, [r4, #0]
   d5338:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d533a:	71a0      	strb	r0, [r4, #6]
   d533c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d533e:	f7ff f8e1 	bl	d4504 <set_system_mode>
SystemClass System;
   d5342:	4620      	mov	r0, r4
   d5344:	4a05      	ldr	r2, [pc, #20]	; (d535c <_GLOBAL__sub_I_System+0x34>)
   d5346:	4906      	ldr	r1, [pc, #24]	; (d5360 <_GLOBAL__sub_I_System+0x38>)
   d5348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d534c:	f000 ba2a 	b.w	d57a4 <__aeabi_atexit>
   d5350:	2003e684 	.word	0x2003e684
   d5354:	2003e678 	.word	0x2003e678
   d5358:	ffff0000 	.word	0xffff0000
   d535c:	2003e640 	.word	0x2003e640
   d5360:	000d531b 	.word	0x000d531b

000d5364 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5364:	4b02      	ldr	r3, [pc, #8]	; (d5370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	4b02      	ldr	r3, [pc, #8]	; (d5374 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d536a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d536c:	4770      	bx	lr
   d536e:	bf00      	nop
   d5370:	2003e5d8 	.word	0x2003e5d8
   d5374:	2003e688 	.word	0x2003e688

000d5378 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5378:	4770      	bx	lr

000d537a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d537a:	7441      	strb	r1, [r0, #17]
}
   d537c:	4770      	bx	lr

000d537e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d537e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5380:	7c00      	ldrb	r0, [r0, #16]
   d5382:	f7ff f87f 	bl	d4484 <hal_usart_available_data_for_write>
}
   d5386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d538a:	bd08      	pop	{r3, pc}

000d538c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d538c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d538e:	7c00      	ldrb	r0, [r0, #16]
   d5390:	f7ff f858 	bl	d4444 <hal_usart_available>
}
   d5394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5398:	bd08      	pop	{r3, pc}

000d539a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d539a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d539c:	7c00      	ldrb	r0, [r0, #16]
   d539e:	f7ff f861 	bl	d4464 <hal_usart_peek>
}
   d53a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53a6:	bd08      	pop	{r3, pc}

000d53a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d53a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d53aa:	7c00      	ldrb	r0, [r0, #16]
   d53ac:	f7ff f852 	bl	d4454 <hal_usart_read>
}
   d53b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53b4:	bd08      	pop	{r3, pc}

000d53b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d53b6:	7c00      	ldrb	r0, [r0, #16]
   d53b8:	f7ff b85c 	b.w	d4474 <hal_usart_flush>

000d53bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d53bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53be:	7c45      	ldrb	r5, [r0, #17]
{
   d53c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53c2:	b12d      	cbz	r5, d53d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d53c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d53c6:	b003      	add	sp, #12
   d53c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d53cc:	f7ff b832 	b.w	d4434 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53d0:	7c00      	ldrb	r0, [r0, #16]
   d53d2:	9101      	str	r1, [sp, #4]
   d53d4:	f7ff f856 	bl	d4484 <hal_usart_available_data_for_write>
   d53d8:	2800      	cmp	r0, #0
   d53da:	9901      	ldr	r1, [sp, #4]
   d53dc:	dcf2      	bgt.n	d53c4 <_ZN11USARTSerial5writeEh+0x8>
}
   d53de:	4628      	mov	r0, r5
   d53e0:	b003      	add	sp, #12
   d53e2:	bd30      	pop	{r4, r5, pc}

000d53e4 <_ZN11USARTSerialD0Ev>:
   d53e4:	b510      	push	{r4, lr}
   d53e6:	2114      	movs	r1, #20
   d53e8:	4604      	mov	r4, r0
   d53ea:	f000 f9e0 	bl	d57ae <_ZdlPvj>
   d53ee:	4620      	mov	r0, r4
   d53f0:	bd10      	pop	{r4, pc}
	...

000d53f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d53f4:	b510      	push	{r4, lr}
   d53f6:	f04f 0c00 	mov.w	ip, #0
   d53fa:	4604      	mov	r4, r0
   d53fc:	4608      	mov	r0, r1
   d53fe:	4611      	mov	r1, r2
   d5400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5404:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5408:	4a04      	ldr	r2, [pc, #16]	; (d541c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d540a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d540c:	2201      	movs	r2, #1
  _serial = serial;
   d540e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5410:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5412:	461a      	mov	r2, r3
   d5414:	f7ff f806 	bl	d4424 <hal_usart_init>
}
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}
   d541c:	000d6328 	.word	0x000d6328

000d5420 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5420:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5422:	4c0e      	ldr	r4, [pc, #56]	; (d545c <_Z22__fetch_global_Serial1v+0x3c>)
   d5424:	7821      	ldrb	r1, [r4, #0]
   d5426:	f3bf 8f5b 	dmb	ish
   d542a:	f011 0101 	ands.w	r1, r1, #1
   d542e:	d112      	bne.n	d5456 <_Z22__fetch_global_Serial1v+0x36>
   d5430:	4620      	mov	r0, r4
   d5432:	9101      	str	r1, [sp, #4]
   d5434:	f7fe fe33 	bl	d409e <__cxa_guard_acquire>
   d5438:	9901      	ldr	r1, [sp, #4]
   d543a:	b160      	cbz	r0, d5456 <_Z22__fetch_global_Serial1v+0x36>
   d543c:	4a08      	ldr	r2, [pc, #32]	; (d5460 <_Z22__fetch_global_Serial1v+0x40>)
   d543e:	4b09      	ldr	r3, [pc, #36]	; (d5464 <_Z22__fetch_global_Serial1v+0x44>)
   d5440:	4809      	ldr	r0, [pc, #36]	; (d5468 <_Z22__fetch_global_Serial1v+0x48>)
   d5442:	f7ff ffd7 	bl	d53f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5446:	4620      	mov	r0, r4
   d5448:	f7fe fe2e 	bl	d40a8 <__cxa_guard_release>
   d544c:	4a07      	ldr	r2, [pc, #28]	; (d546c <_Z22__fetch_global_Serial1v+0x4c>)
   d544e:	4908      	ldr	r1, [pc, #32]	; (d5470 <_Z22__fetch_global_Serial1v+0x50>)
   d5450:	4805      	ldr	r0, [pc, #20]	; (d5468 <_Z22__fetch_global_Serial1v+0x48>)
   d5452:	f000 f9a7 	bl	d57a4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5456:	4804      	ldr	r0, [pc, #16]	; (d5468 <_Z22__fetch_global_Serial1v+0x48>)
   d5458:	b002      	add	sp, #8
   d545a:	bd10      	pop	{r4, pc}
   d545c:	2003e68c 	.word	0x2003e68c
   d5460:	2003e690 	.word	0x2003e690
   d5464:	2003e714 	.word	0x2003e714
   d5468:	2003e798 	.word	0x2003e798
   d546c:	2003e640 	.word	0x2003e640
   d5470:	000d5379 	.word	0x000d5379

000d5474 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5474:	7441      	strb	r1, [r0, #17]
}
   d5476:	4770      	bx	lr

000d5478 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5478:	4770      	bx	lr

000d547a <_ZN9USBSerial4readEv>:
{
   d547a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d547c:	2100      	movs	r1, #0
   d547e:	7c00      	ldrb	r0, [r0, #16]
   d5480:	f7ff f828 	bl	d44d4 <HAL_USB_USART_Receive_Data>
}
   d5484:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5488:	bd08      	pop	{r3, pc}

000d548a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d548a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d548c:	2101      	movs	r1, #1
   d548e:	7c00      	ldrb	r0, [r0, #16]
   d5490:	f7ff f820 	bl	d44d4 <HAL_USB_USART_Receive_Data>
}
   d5494:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5498:	bd08      	pop	{r3, pc}

000d549a <_ZN9USBSerial17availableForWriteEv>:
{
   d549a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d549c:	7c00      	ldrb	r0, [r0, #16]
   d549e:	f7ff f811 	bl	d44c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d54a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54a6:	bd08      	pop	{r3, pc}

000d54a8 <_ZN9USBSerial9availableEv>:
{
   d54a8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d54aa:	7c00      	ldrb	r0, [r0, #16]
   d54ac:	f7ff f802 	bl	d44b4 <HAL_USB_USART_Available_Data>
}
   d54b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54b4:	bd08      	pop	{r3, pc}

000d54b6 <_ZN9USBSerial5writeEh>:
{
   d54b6:	b513      	push	{r0, r1, r4, lr}
   d54b8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54ba:	7c00      	ldrb	r0, [r0, #16]
{
   d54bc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54be:	f7ff f801 	bl	d44c4 <HAL_USB_USART_Available_Data_For_Write>
   d54c2:	2800      	cmp	r0, #0
   d54c4:	9901      	ldr	r1, [sp, #4]
   d54c6:	dc01      	bgt.n	d54cc <_ZN9USBSerial5writeEh+0x16>
   d54c8:	7c60      	ldrb	r0, [r4, #17]
   d54ca:	b120      	cbz	r0, d54d6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d54cc:	7c20      	ldrb	r0, [r4, #16]
   d54ce:	f7ff f809 	bl	d44e4 <HAL_USB_USART_Send_Data>
   d54d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d54d6:	b002      	add	sp, #8
   d54d8:	bd10      	pop	{r4, pc}

000d54da <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d54da:	7c00      	ldrb	r0, [r0, #16]
   d54dc:	f7ff b80a 	b.w	d44f4 <HAL_USB_USART_Flush_Data>

000d54e0 <_ZN9USBSerialD0Ev>:
   d54e0:	b510      	push	{r4, lr}
   d54e2:	2114      	movs	r1, #20
   d54e4:	4604      	mov	r4, r0
   d54e6:	f000 f962 	bl	d57ae <_ZdlPvj>
   d54ea:	4620      	mov	r0, r4
   d54ec:	bd10      	pop	{r4, pc}
	...

000d54f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54f0:	b510      	push	{r4, lr}
   d54f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54f6:	4604      	mov	r4, r0
   d54f8:	4608      	mov	r0, r1
   d54fa:	2100      	movs	r1, #0
   d54fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5500:	4b04      	ldr	r3, [pc, #16]	; (d5514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5502:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5504:	2301      	movs	r3, #1
  _serial = serial;
   d5506:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5508:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d550a:	4611      	mov	r1, r2
   d550c:	f7fe ffc2 	bl	d4494 <HAL_USB_USART_Init>
}
   d5510:	4620      	mov	r0, r4
   d5512:	bd10      	pop	{r4, pc}
   d5514:	000d6358 	.word	0x000d6358

000d5518 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5518:	7c00      	ldrb	r0, [r0, #16]
   d551a:	2200      	movs	r2, #0
   d551c:	f7fe bfc2 	b.w	d44a4 <HAL_USB_USART_Begin>

000d5520 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5520:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5522:	2214      	movs	r2, #20
{
   d5524:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5526:	2100      	movs	r1, #0
   d5528:	f000 fe18 	bl	d615c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d552c:	4620      	mov	r0, r4
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5530:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5532:	4c10      	ldr	r4, [pc, #64]	; (d5574 <_Z16_fetch_usbserialv+0x44>)
{
   d5534:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5536:	a803      	add	r0, sp, #12
   d5538:	f7ff fff2 	bl	d5520 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d553c:	7821      	ldrb	r1, [r4, #0]
   d553e:	f3bf 8f5b 	dmb	ish
   d5542:	f011 0101 	ands.w	r1, r1, #1
   d5546:	d111      	bne.n	d556c <_Z16_fetch_usbserialv+0x3c>
   d5548:	4620      	mov	r0, r4
   d554a:	9101      	str	r1, [sp, #4]
   d554c:	f7fe fda7 	bl	d409e <__cxa_guard_acquire>
   d5550:	9901      	ldr	r1, [sp, #4]
   d5552:	b158      	cbz	r0, d556c <_Z16_fetch_usbserialv+0x3c>
   d5554:	aa03      	add	r2, sp, #12
   d5556:	4808      	ldr	r0, [pc, #32]	; (d5578 <_Z16_fetch_usbserialv+0x48>)
   d5558:	f7ff ffca 	bl	d54f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d555c:	4620      	mov	r0, r4
   d555e:	f7fe fda3 	bl	d40a8 <__cxa_guard_release>
   d5562:	4a06      	ldr	r2, [pc, #24]	; (d557c <_Z16_fetch_usbserialv+0x4c>)
   d5564:	4906      	ldr	r1, [pc, #24]	; (d5580 <_Z16_fetch_usbserialv+0x50>)
   d5566:	4804      	ldr	r0, [pc, #16]	; (d5578 <_Z16_fetch_usbserialv+0x48>)
   d5568:	f000 f91c 	bl	d57a4 <__aeabi_atexit>
	return _usbserial;
}
   d556c:	4802      	ldr	r0, [pc, #8]	; (d5578 <_Z16_fetch_usbserialv+0x48>)
   d556e:	b008      	add	sp, #32
   d5570:	bd10      	pop	{r4, pc}
   d5572:	bf00      	nop
   d5574:	2003e7ac 	.word	0x2003e7ac
   d5578:	2003e7b0 	.word	0x2003e7b0
   d557c:	2003e640 	.word	0x2003e640
   d5580:	000d5479 	.word	0x000d5479

000d5584 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5584:	2200      	movs	r2, #0
   d5586:	6840      	ldr	r0, [r0, #4]
   d5588:	4611      	mov	r1, r2
   d558a:	f7ff b81f 	b.w	d45cc <network_ready>

000d558e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d558e:	2200      	movs	r2, #0
   d5590:	6840      	ldr	r0, [r0, #4]
   d5592:	4611      	mov	r1, r2
   d5594:	f7ff b83a 	b.w	d460c <network_listening>

000d5598 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5598:	2200      	movs	r2, #0
   d559a:	6840      	ldr	r0, [r0, #4]
   d559c:	4611      	mov	r1, r2
   d559e:	f7ff b845 	b.w	d462c <network_get_listen_timeout>

000d55a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	2200      	movs	r2, #0
   d55a6:	f7ff b839 	b.w	d461c <network_set_listen_timeout>

000d55aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55aa:	6840      	ldr	r0, [r0, #4]
   d55ac:	2200      	movs	r2, #0
   d55ae:	f081 0101 	eor.w	r1, r1, #1
   d55b2:	f7ff b823 	b.w	d45fc <network_listen>

000d55b6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55b6:	2300      	movs	r3, #0
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	461a      	mov	r2, r3
   d55bc:	4619      	mov	r1, r3
   d55be:	f7ff b815 	b.w	d45ec <network_off>

000d55c2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55c2:	2300      	movs	r3, #0
   d55c4:	6840      	ldr	r0, [r0, #4]
   d55c6:	461a      	mov	r2, r3
   d55c8:	4619      	mov	r1, r3
   d55ca:	f7ff b807 	b.w	d45dc <network_on>

000d55ce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55ce:	2200      	movs	r2, #0
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	4611      	mov	r1, r2
   d55d4:	f7fe bfea 	b.w	d45ac <network_connecting>

000d55d8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55d8:	6840      	ldr	r0, [r0, #4]
   d55da:	2200      	movs	r2, #0
   d55dc:	2102      	movs	r1, #2
   d55de:	f7fe bfed 	b.w	d45bc <network_disconnect>

000d55e2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d55e2:	2300      	movs	r3, #0
   d55e4:	6840      	ldr	r0, [r0, #4]
   d55e6:	461a      	mov	r2, r3
   d55e8:	f7fe bfd8 	b.w	d459c <network_connect>

000d55ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d55ec:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d55ee:	2204      	movs	r2, #4
   d55f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d55f2:	4a02      	ldr	r2, [pc, #8]	; (d55fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d55f4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d55f6:	4770      	bx	lr
   d55f8:	2003e7c4 	.word	0x2003e7c4
   d55fc:	000d6388 	.word	0x000d6388

000d5600 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5600:	4b01      	ldr	r3, [pc, #4]	; (d5608 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5602:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5604:	4770      	bx	lr
   d5606:	bf00      	nop
   d5608:	2003e5dc 	.word	0x2003e5dc

000d560c <serialEventRun>:
{
   d560c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d560e:	4b0b      	ldr	r3, [pc, #44]	; (d563c <serialEventRun+0x30>)
   d5610:	b143      	cbz	r3, d5624 <serialEventRun+0x18>
   d5612:	f7ff ff8d 	bl	d5530 <_Z16_fetch_usbserialv>
   d5616:	6803      	ldr	r3, [r0, #0]
   d5618:	691b      	ldr	r3, [r3, #16]
   d561a:	4798      	blx	r3
   d561c:	2800      	cmp	r0, #0
   d561e:	dd01      	ble.n	d5624 <serialEventRun+0x18>
        serialEvent();
   d5620:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5624:	4b06      	ldr	r3, [pc, #24]	; (d5640 <serialEventRun+0x34>)
   d5626:	b143      	cbz	r3, d563a <serialEventRun+0x2e>
   d5628:	f7ff fefa 	bl	d5420 <_Z22__fetch_global_Serial1v>
   d562c:	6803      	ldr	r3, [r0, #0]
   d562e:	691b      	ldr	r3, [r3, #16]
   d5630:	4798      	blx	r3
   d5632:	2800      	cmp	r0, #0
   d5634:	dd01      	ble.n	d563a <serialEventRun+0x2e>
        serialEvent1();
   d5636:	f3af 8000 	nop.w
}
   d563a:	bd08      	pop	{r3, pc}
	...

000d5644 <_post_loop>:
{
   d5644:	b508      	push	{r3, lr}
	serialEventRun();
   d5646:	f7ff ffe1 	bl	d560c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d564a:	f7fe fe73 	bl	d4334 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d564e:	4b01      	ldr	r3, [pc, #4]	; (d5654 <_post_loop+0x10>)
   d5650:	6018      	str	r0, [r3, #0]
}
   d5652:	bd08      	pop	{r3, pc}
   d5654:	2003e7d4 	.word	0x2003e7d4

000d5658 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5658:	4802      	ldr	r0, [pc, #8]	; (d5664 <_Z33system_initialize_user_backup_ramv+0xc>)
   d565a:	4a03      	ldr	r2, [pc, #12]	; (d5668 <_Z33system_initialize_user_backup_ramv+0x10>)
   d565c:	4903      	ldr	r1, [pc, #12]	; (d566c <_Z33system_initialize_user_backup_ramv+0x14>)
   d565e:	1a12      	subs	r2, r2, r0
   d5660:	f000 bd6e 	b.w	d6140 <memcpy>
   d5664:	2003f400 	.word	0x2003f400
   d5668:	2003f404 	.word	0x2003f404
   d566c:	000d63e0 	.word	0x000d63e0

000d5670 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5670:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5672:	2300      	movs	r3, #0
   d5674:	9300      	str	r3, [sp, #0]
   d5676:	461a      	mov	r2, r3
   d5678:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d567c:	f7fe ff6c 	bl	d4558 <system_ctrl_set_result>
}
   d5680:	b003      	add	sp, #12
   d5682:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5688 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5688:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d568a:	8843      	ldrh	r3, [r0, #2]
   d568c:	2b0a      	cmp	r3, #10
   d568e:	d008      	beq.n	d56a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5690:	2b50      	cmp	r3, #80	; 0x50
   d5692:	d10b      	bne.n	d56ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5694:	4b09      	ldr	r3, [pc, #36]	; (d56bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5696:	681b      	ldr	r3, [r3, #0]
   d5698:	b14b      	cbz	r3, d56ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d569a:	b003      	add	sp, #12
   d569c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d56a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d56a2:	f7ff ffe5 	bl	d5670 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d56a6:	b003      	add	sp, #12
   d56a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56ac:	2300      	movs	r3, #0
   d56ae:	9300      	str	r3, [sp, #0]
   d56b0:	461a      	mov	r2, r3
   d56b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56b6:	f7fe ff4f 	bl	d4558 <system_ctrl_set_result>
}
   d56ba:	e7f4      	b.n	d56a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d56bc:	2003e7d0 	.word	0x2003e7d0

000d56c0 <module_user_init_hook>:
{
   d56c0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d56c2:	4c12      	ldr	r4, [pc, #72]	; (d570c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d56c4:	4812      	ldr	r0, [pc, #72]	; (d5710 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d56c6:	4d13      	ldr	r5, [pc, #76]	; (d5714 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d56c8:	2100      	movs	r1, #0
   d56ca:	f7fe ffd7 	bl	d467c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d56ce:	6823      	ldr	r3, [r4, #0]
   d56d0:	42ab      	cmp	r3, r5
   d56d2:	4b11      	ldr	r3, [pc, #68]	; (d5718 <module_user_init_hook+0x58>)
   d56d4:	bf0c      	ite	eq
   d56d6:	2201      	moveq	r2, #1
   d56d8:	2200      	movne	r2, #0
   d56da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d56dc:	d002      	beq.n	d56e4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d56de:	f7ff ffbb 	bl	d5658 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d56e2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d56e4:	f7fe fe1e 	bl	d4324 <HAL_RNG_GetRandomNumber>
   d56e8:	4604      	mov	r4, r0
    srand(seed);
   d56ea:	f000 fd3f 	bl	d616c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d56ee:	4b0b      	ldr	r3, [pc, #44]	; (d571c <module_user_init_hook+0x5c>)
   d56f0:	b113      	cbz	r3, d56f8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d56f2:	4620      	mov	r0, r4
   d56f4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d56f8:	2100      	movs	r1, #0
   d56fa:	4808      	ldr	r0, [pc, #32]	; (d571c <module_user_init_hook+0x5c>)
   d56fc:	f7fe ff46 	bl	d458c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5704:	4806      	ldr	r0, [pc, #24]	; (d5720 <module_user_init_hook+0x60>)
   d5706:	2100      	movs	r1, #0
   d5708:	f7fe bf1c 	b.w	d4544 <system_ctrl_set_app_request_handler>
   d570c:	2003f400 	.word	0x2003f400
   d5710:	000d5601 	.word	0x000d5601
   d5714:	9a271c1e 	.word	0x9a271c1e
   d5718:	2003e7cc 	.word	0x2003e7cc
   d571c:	00000000 	.word	0x00000000
   d5720:	000d5689 	.word	0x000d5689

000d5724 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5724:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5726:	2300      	movs	r3, #0
   d5728:	2520      	movs	r5, #32
   d572a:	8043      	strh	r3, [r0, #2]
   d572c:	2314      	movs	r3, #20
{
   d572e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5730:	8003      	strh	r3, [r0, #0]
   d5732:	6085      	str	r5, [r0, #8]
   d5734:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5736:	4906      	ldr	r1, [pc, #24]	; (d5750 <_Z17acquireWireBufferv+0x2c>)
   d5738:	4628      	mov	r0, r5
   d573a:	f000 f83a 	bl	d57b2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d573e:	4904      	ldr	r1, [pc, #16]	; (d5750 <_Z17acquireWireBufferv+0x2c>)
	};
   d5740:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5742:	4628      	mov	r0, r5
   d5744:	f000 f835 	bl	d57b2 <_ZnajRKSt9nothrow_t>
	};
   d5748:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d574a:	4620      	mov	r0, r4
   d574c:	bd38      	pop	{r3, r4, r5, pc}
   d574e:	bf00      	nop
   d5750:	000d63b4 	.word	0x000d63b4

000d5754 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5754:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5756:	4d0f      	ldr	r5, [pc, #60]	; (d5794 <_Z19__fetch_global_Wirev+0x40>)
   d5758:	7829      	ldrb	r1, [r5, #0]
   d575a:	f3bf 8f5b 	dmb	ish
   d575e:	f011 0401 	ands.w	r4, r1, #1
{
   d5762:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5764:	d113      	bne.n	d578e <_Z19__fetch_global_Wirev+0x3a>
   d5766:	4628      	mov	r0, r5
   d5768:	f7fe fc99 	bl	d409e <__cxa_guard_acquire>
   d576c:	b178      	cbz	r0, d578e <_Z19__fetch_global_Wirev+0x3a>
   d576e:	a801      	add	r0, sp, #4
   d5770:	f7ff ffd8 	bl	d5724 <_Z17acquireWireBufferv>
   d5774:	aa01      	add	r2, sp, #4
   d5776:	4621      	mov	r1, r4
   d5778:	4807      	ldr	r0, [pc, #28]	; (d5798 <_Z19__fetch_global_Wirev+0x44>)
   d577a:	f7ff faff 	bl	d4d7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d577e:	4628      	mov	r0, r5
   d5780:	f7fe fc92 	bl	d40a8 <__cxa_guard_release>
   d5784:	4a05      	ldr	r2, [pc, #20]	; (d579c <_Z19__fetch_global_Wirev+0x48>)
   d5786:	4906      	ldr	r1, [pc, #24]	; (d57a0 <_Z19__fetch_global_Wirev+0x4c>)
   d5788:	4803      	ldr	r0, [pc, #12]	; (d5798 <_Z19__fetch_global_Wirev+0x44>)
   d578a:	f000 f80b 	bl	d57a4 <__aeabi_atexit>
	return wire;
}
   d578e:	4802      	ldr	r0, [pc, #8]	; (d5798 <_Z19__fetch_global_Wirev+0x44>)
   d5790:	b007      	add	sp, #28
   d5792:	bd30      	pop	{r4, r5, pc}
   d5794:	2003e7d8 	.word	0x2003e7d8
   d5798:	2003e7dc 	.word	0x2003e7dc
   d579c:	2003e640 	.word	0x2003e640
   d57a0:	000d4d25 	.word	0x000d4d25

000d57a4 <__aeabi_atexit>:
   d57a4:	460b      	mov	r3, r1
   d57a6:	4601      	mov	r1, r0
   d57a8:	4618      	mov	r0, r3
   d57aa:	f000 bcbb 	b.w	d6124 <__cxa_atexit>

000d57ae <_ZdlPvj>:
   d57ae:	f7fe bc74 	b.w	d409a <_ZdlPv>

000d57b2 <_ZnajRKSt9nothrow_t>:
   d57b2:	f7fe bc70 	b.w	d4096 <_Znaj>

000d57b6 <_ZSt25__throw_bad_function_callv>:
   d57b6:	b508      	push	{r3, lr}
   d57b8:	f7fe ff50 	bl	d465c <abort>

000d57bc <__aeabi_drsub>:
   d57bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d57c0:	e002      	b.n	d57c8 <__adddf3>
   d57c2:	bf00      	nop

000d57c4 <__aeabi_dsub>:
   d57c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d57c8 <__adddf3>:
   d57c8:	b530      	push	{r4, r5, lr}
   d57ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d57ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d57d2:	ea94 0f05 	teq	r4, r5
   d57d6:	bf08      	it	eq
   d57d8:	ea90 0f02 	teqeq	r0, r2
   d57dc:	bf1f      	itttt	ne
   d57de:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57ee:	f000 80e2 	beq.w	d59b6 <__adddf3+0x1ee>
   d57f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57fa:	bfb8      	it	lt
   d57fc:	426d      	neglt	r5, r5
   d57fe:	dd0c      	ble.n	d581a <__adddf3+0x52>
   d5800:	442c      	add	r4, r5
   d5802:	ea80 0202 	eor.w	r2, r0, r2
   d5806:	ea81 0303 	eor.w	r3, r1, r3
   d580a:	ea82 0000 	eor.w	r0, r2, r0
   d580e:	ea83 0101 	eor.w	r1, r3, r1
   d5812:	ea80 0202 	eor.w	r2, r0, r2
   d5816:	ea81 0303 	eor.w	r3, r1, r3
   d581a:	2d36      	cmp	r5, #54	; 0x36
   d581c:	bf88      	it	hi
   d581e:	bd30      	pophi	{r4, r5, pc}
   d5820:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5824:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5828:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d582c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5830:	d002      	beq.n	d5838 <__adddf3+0x70>
   d5832:	4240      	negs	r0, r0
   d5834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5838:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d583c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5840:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5844:	d002      	beq.n	d584c <__adddf3+0x84>
   d5846:	4252      	negs	r2, r2
   d5848:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d584c:	ea94 0f05 	teq	r4, r5
   d5850:	f000 80a7 	beq.w	d59a2 <__adddf3+0x1da>
   d5854:	f1a4 0401 	sub.w	r4, r4, #1
   d5858:	f1d5 0e20 	rsbs	lr, r5, #32
   d585c:	db0d      	blt.n	d587a <__adddf3+0xb2>
   d585e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5862:	fa22 f205 	lsr.w	r2, r2, r5
   d5866:	1880      	adds	r0, r0, r2
   d5868:	f141 0100 	adc.w	r1, r1, #0
   d586c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5870:	1880      	adds	r0, r0, r2
   d5872:	fa43 f305 	asr.w	r3, r3, r5
   d5876:	4159      	adcs	r1, r3
   d5878:	e00e      	b.n	d5898 <__adddf3+0xd0>
   d587a:	f1a5 0520 	sub.w	r5, r5, #32
   d587e:	f10e 0e20 	add.w	lr, lr, #32
   d5882:	2a01      	cmp	r2, #1
   d5884:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5888:	bf28      	it	cs
   d588a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d588e:	fa43 f305 	asr.w	r3, r3, r5
   d5892:	18c0      	adds	r0, r0, r3
   d5894:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d589c:	d507      	bpl.n	d58ae <__adddf3+0xe6>
   d589e:	f04f 0e00 	mov.w	lr, #0
   d58a2:	f1dc 0c00 	rsbs	ip, ip, #0
   d58a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58aa:	eb6e 0101 	sbc.w	r1, lr, r1
   d58ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58b2:	d31b      	bcc.n	d58ec <__adddf3+0x124>
   d58b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58b8:	d30c      	bcc.n	d58d4 <__adddf3+0x10c>
   d58ba:	0849      	lsrs	r1, r1, #1
   d58bc:	ea5f 0030 	movs.w	r0, r0, rrx
   d58c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d58c4:	f104 0401 	add.w	r4, r4, #1
   d58c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d58cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d58d0:	f080 809a 	bcs.w	d5a08 <__adddf3+0x240>
   d58d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d58d8:	bf08      	it	eq
   d58da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d58de:	f150 0000 	adcs.w	r0, r0, #0
   d58e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58e6:	ea41 0105 	orr.w	r1, r1, r5
   d58ea:	bd30      	pop	{r4, r5, pc}
   d58ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58f0:	4140      	adcs	r0, r0
   d58f2:	eb41 0101 	adc.w	r1, r1, r1
   d58f6:	3c01      	subs	r4, #1
   d58f8:	bf28      	it	cs
   d58fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d58fe:	d2e9      	bcs.n	d58d4 <__adddf3+0x10c>
   d5900:	f091 0f00 	teq	r1, #0
   d5904:	bf04      	itt	eq
   d5906:	4601      	moveq	r1, r0
   d5908:	2000      	moveq	r0, #0
   d590a:	fab1 f381 	clz	r3, r1
   d590e:	bf08      	it	eq
   d5910:	3320      	addeq	r3, #32
   d5912:	f1a3 030b 	sub.w	r3, r3, #11
   d5916:	f1b3 0220 	subs.w	r2, r3, #32
   d591a:	da0c      	bge.n	d5936 <__adddf3+0x16e>
   d591c:	320c      	adds	r2, #12
   d591e:	dd08      	ble.n	d5932 <__adddf3+0x16a>
   d5920:	f102 0c14 	add.w	ip, r2, #20
   d5924:	f1c2 020c 	rsb	r2, r2, #12
   d5928:	fa01 f00c 	lsl.w	r0, r1, ip
   d592c:	fa21 f102 	lsr.w	r1, r1, r2
   d5930:	e00c      	b.n	d594c <__adddf3+0x184>
   d5932:	f102 0214 	add.w	r2, r2, #20
   d5936:	bfd8      	it	le
   d5938:	f1c2 0c20 	rsble	ip, r2, #32
   d593c:	fa01 f102 	lsl.w	r1, r1, r2
   d5940:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5944:	bfdc      	itt	le
   d5946:	ea41 010c 	orrle.w	r1, r1, ip
   d594a:	4090      	lslle	r0, r2
   d594c:	1ae4      	subs	r4, r4, r3
   d594e:	bfa2      	ittt	ge
   d5950:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5954:	4329      	orrge	r1, r5
   d5956:	bd30      	popge	{r4, r5, pc}
   d5958:	ea6f 0404 	mvn.w	r4, r4
   d595c:	3c1f      	subs	r4, #31
   d595e:	da1c      	bge.n	d599a <__adddf3+0x1d2>
   d5960:	340c      	adds	r4, #12
   d5962:	dc0e      	bgt.n	d5982 <__adddf3+0x1ba>
   d5964:	f104 0414 	add.w	r4, r4, #20
   d5968:	f1c4 0220 	rsb	r2, r4, #32
   d596c:	fa20 f004 	lsr.w	r0, r0, r4
   d5970:	fa01 f302 	lsl.w	r3, r1, r2
   d5974:	ea40 0003 	orr.w	r0, r0, r3
   d5978:	fa21 f304 	lsr.w	r3, r1, r4
   d597c:	ea45 0103 	orr.w	r1, r5, r3
   d5980:	bd30      	pop	{r4, r5, pc}
   d5982:	f1c4 040c 	rsb	r4, r4, #12
   d5986:	f1c4 0220 	rsb	r2, r4, #32
   d598a:	fa20 f002 	lsr.w	r0, r0, r2
   d598e:	fa01 f304 	lsl.w	r3, r1, r4
   d5992:	ea40 0003 	orr.w	r0, r0, r3
   d5996:	4629      	mov	r1, r5
   d5998:	bd30      	pop	{r4, r5, pc}
   d599a:	fa21 f004 	lsr.w	r0, r1, r4
   d599e:	4629      	mov	r1, r5
   d59a0:	bd30      	pop	{r4, r5, pc}
   d59a2:	f094 0f00 	teq	r4, #0
   d59a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59aa:	bf06      	itte	eq
   d59ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59b0:	3401      	addeq	r4, #1
   d59b2:	3d01      	subne	r5, #1
   d59b4:	e74e      	b.n	d5854 <__adddf3+0x8c>
   d59b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59ba:	bf18      	it	ne
   d59bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59c0:	d029      	beq.n	d5a16 <__adddf3+0x24e>
   d59c2:	ea94 0f05 	teq	r4, r5
   d59c6:	bf08      	it	eq
   d59c8:	ea90 0f02 	teqeq	r0, r2
   d59cc:	d005      	beq.n	d59da <__adddf3+0x212>
   d59ce:	ea54 0c00 	orrs.w	ip, r4, r0
   d59d2:	bf04      	itt	eq
   d59d4:	4619      	moveq	r1, r3
   d59d6:	4610      	moveq	r0, r2
   d59d8:	bd30      	pop	{r4, r5, pc}
   d59da:	ea91 0f03 	teq	r1, r3
   d59de:	bf1e      	ittt	ne
   d59e0:	2100      	movne	r1, #0
   d59e2:	2000      	movne	r0, #0
   d59e4:	bd30      	popne	{r4, r5, pc}
   d59e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59ea:	d105      	bne.n	d59f8 <__adddf3+0x230>
   d59ec:	0040      	lsls	r0, r0, #1
   d59ee:	4149      	adcs	r1, r1
   d59f0:	bf28      	it	cs
   d59f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59f6:	bd30      	pop	{r4, r5, pc}
   d59f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59fc:	bf3c      	itt	cc
   d59fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a02:	bd30      	popcc	{r4, r5, pc}
   d5a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a10:	f04f 0000 	mov.w	r0, #0
   d5a14:	bd30      	pop	{r4, r5, pc}
   d5a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a1a:	bf1a      	itte	ne
   d5a1c:	4619      	movne	r1, r3
   d5a1e:	4610      	movne	r0, r2
   d5a20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a24:	bf1c      	itt	ne
   d5a26:	460b      	movne	r3, r1
   d5a28:	4602      	movne	r2, r0
   d5a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a2e:	bf06      	itte	eq
   d5a30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a34:	ea91 0f03 	teqeq	r1, r3
   d5a38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a3c:	bd30      	pop	{r4, r5, pc}
   d5a3e:	bf00      	nop

000d5a40 <__aeabi_ui2d>:
   d5a40:	f090 0f00 	teq	r0, #0
   d5a44:	bf04      	itt	eq
   d5a46:	2100      	moveq	r1, #0
   d5a48:	4770      	bxeq	lr
   d5a4a:	b530      	push	{r4, r5, lr}
   d5a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a54:	f04f 0500 	mov.w	r5, #0
   d5a58:	f04f 0100 	mov.w	r1, #0
   d5a5c:	e750      	b.n	d5900 <__adddf3+0x138>
   d5a5e:	bf00      	nop

000d5a60 <__aeabi_i2d>:
   d5a60:	f090 0f00 	teq	r0, #0
   d5a64:	bf04      	itt	eq
   d5a66:	2100      	moveq	r1, #0
   d5a68:	4770      	bxeq	lr
   d5a6a:	b530      	push	{r4, r5, lr}
   d5a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a78:	bf48      	it	mi
   d5a7a:	4240      	negmi	r0, r0
   d5a7c:	f04f 0100 	mov.w	r1, #0
   d5a80:	e73e      	b.n	d5900 <__adddf3+0x138>
   d5a82:	bf00      	nop

000d5a84 <__aeabi_f2d>:
   d5a84:	0042      	lsls	r2, r0, #1
   d5a86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a8a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a92:	bf1f      	itttt	ne
   d5a94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5aa0:	4770      	bxne	lr
   d5aa2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5aa6:	bf08      	it	eq
   d5aa8:	4770      	bxeq	lr
   d5aaa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5aae:	bf04      	itt	eq
   d5ab0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5ab4:	4770      	bxeq	lr
   d5ab6:	b530      	push	{r4, r5, lr}
   d5ab8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5abc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5ac4:	e71c      	b.n	d5900 <__adddf3+0x138>
   d5ac6:	bf00      	nop

000d5ac8 <__aeabi_ul2d>:
   d5ac8:	ea50 0201 	orrs.w	r2, r0, r1
   d5acc:	bf08      	it	eq
   d5ace:	4770      	bxeq	lr
   d5ad0:	b530      	push	{r4, r5, lr}
   d5ad2:	f04f 0500 	mov.w	r5, #0
   d5ad6:	e00a      	b.n	d5aee <__aeabi_l2d+0x16>

000d5ad8 <__aeabi_l2d>:
   d5ad8:	ea50 0201 	orrs.w	r2, r0, r1
   d5adc:	bf08      	it	eq
   d5ade:	4770      	bxeq	lr
   d5ae0:	b530      	push	{r4, r5, lr}
   d5ae2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5ae6:	d502      	bpl.n	d5aee <__aeabi_l2d+0x16>
   d5ae8:	4240      	negs	r0, r0
   d5aea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5aee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5af2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5af6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5afa:	f43f aed8 	beq.w	d58ae <__adddf3+0xe6>
   d5afe:	f04f 0203 	mov.w	r2, #3
   d5b02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b06:	bf18      	it	ne
   d5b08:	3203      	addne	r2, #3
   d5b0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b0e:	bf18      	it	ne
   d5b10:	3203      	addne	r2, #3
   d5b12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b16:	f1c2 0320 	rsb	r3, r2, #32
   d5b1a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b1e:	fa20 f002 	lsr.w	r0, r0, r2
   d5b22:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b26:	ea40 000e 	orr.w	r0, r0, lr
   d5b2a:	fa21 f102 	lsr.w	r1, r1, r2
   d5b2e:	4414      	add	r4, r2
   d5b30:	e6bd      	b.n	d58ae <__adddf3+0xe6>
   d5b32:	bf00      	nop

000d5b34 <__aeabi_dmul>:
   d5b34:	b570      	push	{r4, r5, r6, lr}
   d5b36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b42:	bf1d      	ittte	ne
   d5b44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b48:	ea94 0f0c 	teqne	r4, ip
   d5b4c:	ea95 0f0c 	teqne	r5, ip
   d5b50:	f000 f8de 	bleq	d5d10 <__aeabi_dmul+0x1dc>
   d5b54:	442c      	add	r4, r5
   d5b56:	ea81 0603 	eor.w	r6, r1, r3
   d5b5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5b66:	bf18      	it	ne
   d5b68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5b74:	d038      	beq.n	d5be8 <__aeabi_dmul+0xb4>
   d5b76:	fba0 ce02 	umull	ip, lr, r0, r2
   d5b7a:	f04f 0500 	mov.w	r5, #0
   d5b7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5b82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5b86:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5b8a:	f04f 0600 	mov.w	r6, #0
   d5b8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b92:	f09c 0f00 	teq	ip, #0
   d5b96:	bf18      	it	ne
   d5b98:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ba0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ba4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5ba8:	d204      	bcs.n	d5bb4 <__aeabi_dmul+0x80>
   d5baa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5bae:	416d      	adcs	r5, r5
   d5bb0:	eb46 0606 	adc.w	r6, r6, r6
   d5bb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5bb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5bbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5bc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5bc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5bc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5bcc:	bf88      	it	hi
   d5bce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5bd2:	d81e      	bhi.n	d5c12 <__aeabi_dmul+0xde>
   d5bd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5bd8:	bf08      	it	eq
   d5bda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5bde:	f150 0000 	adcs.w	r0, r0, #0
   d5be2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5be6:	bd70      	pop	{r4, r5, r6, pc}
   d5be8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5bec:	ea46 0101 	orr.w	r1, r6, r1
   d5bf0:	ea40 0002 	orr.w	r0, r0, r2
   d5bf4:	ea81 0103 	eor.w	r1, r1, r3
   d5bf8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5bfc:	bfc2      	ittt	gt
   d5bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c06:	bd70      	popgt	{r4, r5, r6, pc}
   d5c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c0c:	f04f 0e00 	mov.w	lr, #0
   d5c10:	3c01      	subs	r4, #1
   d5c12:	f300 80ab 	bgt.w	d5d6c <__aeabi_dmul+0x238>
   d5c16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c1a:	bfde      	ittt	le
   d5c1c:	2000      	movle	r0, #0
   d5c1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c22:	bd70      	pople	{r4, r5, r6, pc}
   d5c24:	f1c4 0400 	rsb	r4, r4, #0
   d5c28:	3c20      	subs	r4, #32
   d5c2a:	da35      	bge.n	d5c98 <__aeabi_dmul+0x164>
   d5c2c:	340c      	adds	r4, #12
   d5c2e:	dc1b      	bgt.n	d5c68 <__aeabi_dmul+0x134>
   d5c30:	f104 0414 	add.w	r4, r4, #20
   d5c34:	f1c4 0520 	rsb	r5, r4, #32
   d5c38:	fa00 f305 	lsl.w	r3, r0, r5
   d5c3c:	fa20 f004 	lsr.w	r0, r0, r4
   d5c40:	fa01 f205 	lsl.w	r2, r1, r5
   d5c44:	ea40 0002 	orr.w	r0, r0, r2
   d5c48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c54:	fa21 f604 	lsr.w	r6, r1, r4
   d5c58:	eb42 0106 	adc.w	r1, r2, r6
   d5c5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c60:	bf08      	it	eq
   d5c62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c66:	bd70      	pop	{r4, r5, r6, pc}
   d5c68:	f1c4 040c 	rsb	r4, r4, #12
   d5c6c:	f1c4 0520 	rsb	r5, r4, #32
   d5c70:	fa00 f304 	lsl.w	r3, r0, r4
   d5c74:	fa20 f005 	lsr.w	r0, r0, r5
   d5c78:	fa01 f204 	lsl.w	r2, r1, r4
   d5c7c:	ea40 0002 	orr.w	r0, r0, r2
   d5c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c88:	f141 0100 	adc.w	r1, r1, #0
   d5c8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c90:	bf08      	it	eq
   d5c92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c96:	bd70      	pop	{r4, r5, r6, pc}
   d5c98:	f1c4 0520 	rsb	r5, r4, #32
   d5c9c:	fa00 f205 	lsl.w	r2, r0, r5
   d5ca0:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ca4:	fa20 f304 	lsr.w	r3, r0, r4
   d5ca8:	fa01 f205 	lsl.w	r2, r1, r5
   d5cac:	ea43 0302 	orr.w	r3, r3, r2
   d5cb0:	fa21 f004 	lsr.w	r0, r1, r4
   d5cb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cb8:	fa21 f204 	lsr.w	r2, r1, r4
   d5cbc:	ea20 0002 	bic.w	r0, r0, r2
   d5cc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5cc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cc8:	bf08      	it	eq
   d5cca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cce:	bd70      	pop	{r4, r5, r6, pc}
   d5cd0:	f094 0f00 	teq	r4, #0
   d5cd4:	d10f      	bne.n	d5cf6 <__aeabi_dmul+0x1c2>
   d5cd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5cda:	0040      	lsls	r0, r0, #1
   d5cdc:	eb41 0101 	adc.w	r1, r1, r1
   d5ce0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ce4:	bf08      	it	eq
   d5ce6:	3c01      	subeq	r4, #1
   d5ce8:	d0f7      	beq.n	d5cda <__aeabi_dmul+0x1a6>
   d5cea:	ea41 0106 	orr.w	r1, r1, r6
   d5cee:	f095 0f00 	teq	r5, #0
   d5cf2:	bf18      	it	ne
   d5cf4:	4770      	bxne	lr
   d5cf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5cfa:	0052      	lsls	r2, r2, #1
   d5cfc:	eb43 0303 	adc.w	r3, r3, r3
   d5d00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d04:	bf08      	it	eq
   d5d06:	3d01      	subeq	r5, #1
   d5d08:	d0f7      	beq.n	d5cfa <__aeabi_dmul+0x1c6>
   d5d0a:	ea43 0306 	orr.w	r3, r3, r6
   d5d0e:	4770      	bx	lr
   d5d10:	ea94 0f0c 	teq	r4, ip
   d5d14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d18:	bf18      	it	ne
   d5d1a:	ea95 0f0c 	teqne	r5, ip
   d5d1e:	d00c      	beq.n	d5d3a <__aeabi_dmul+0x206>
   d5d20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d24:	bf18      	it	ne
   d5d26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d2a:	d1d1      	bne.n	d5cd0 <__aeabi_dmul+0x19c>
   d5d2c:	ea81 0103 	eor.w	r1, r1, r3
   d5d30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d34:	f04f 0000 	mov.w	r0, #0
   d5d38:	bd70      	pop	{r4, r5, r6, pc}
   d5d3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d3e:	bf06      	itte	eq
   d5d40:	4610      	moveq	r0, r2
   d5d42:	4619      	moveq	r1, r3
   d5d44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d48:	d019      	beq.n	d5d7e <__aeabi_dmul+0x24a>
   d5d4a:	ea94 0f0c 	teq	r4, ip
   d5d4e:	d102      	bne.n	d5d56 <__aeabi_dmul+0x222>
   d5d50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d54:	d113      	bne.n	d5d7e <__aeabi_dmul+0x24a>
   d5d56:	ea95 0f0c 	teq	r5, ip
   d5d5a:	d105      	bne.n	d5d68 <__aeabi_dmul+0x234>
   d5d5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d60:	bf1c      	itt	ne
   d5d62:	4610      	movne	r0, r2
   d5d64:	4619      	movne	r1, r3
   d5d66:	d10a      	bne.n	d5d7e <__aeabi_dmul+0x24a>
   d5d68:	ea81 0103 	eor.w	r1, r1, r3
   d5d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d78:	f04f 0000 	mov.w	r0, #0
   d5d7c:	bd70      	pop	{r4, r5, r6, pc}
   d5d7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5d86:	bd70      	pop	{r4, r5, r6, pc}

000d5d88 <__aeabi_ddiv>:
   d5d88:	b570      	push	{r4, r5, r6, lr}
   d5d8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d96:	bf1d      	ittte	ne
   d5d98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d9c:	ea94 0f0c 	teqne	r4, ip
   d5da0:	ea95 0f0c 	teqne	r5, ip
   d5da4:	f000 f8a7 	bleq	d5ef6 <__aeabi_ddiv+0x16e>
   d5da8:	eba4 0405 	sub.w	r4, r4, r5
   d5dac:	ea81 0e03 	eor.w	lr, r1, r3
   d5db0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5db4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5db8:	f000 8088 	beq.w	d5ecc <__aeabi_ddiv+0x144>
   d5dbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5dc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5dc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5dc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5dcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5dd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5dd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5dd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5ddc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5de0:	429d      	cmp	r5, r3
   d5de2:	bf08      	it	eq
   d5de4:	4296      	cmpeq	r6, r2
   d5de6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5dea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5dee:	d202      	bcs.n	d5df6 <__aeabi_ddiv+0x6e>
   d5df0:	085b      	lsrs	r3, r3, #1
   d5df2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5df6:	1ab6      	subs	r6, r6, r2
   d5df8:	eb65 0503 	sbc.w	r5, r5, r3
   d5dfc:	085b      	lsrs	r3, r3, #1
   d5dfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e0a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e12:	bf22      	ittt	cs
   d5e14:	1ab6      	subcs	r6, r6, r2
   d5e16:	4675      	movcs	r5, lr
   d5e18:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e1c:	085b      	lsrs	r3, r3, #1
   d5e1e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e22:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e2a:	bf22      	ittt	cs
   d5e2c:	1ab6      	subcs	r6, r6, r2
   d5e2e:	4675      	movcs	r5, lr
   d5e30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e34:	085b      	lsrs	r3, r3, #1
   d5e36:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e42:	bf22      	ittt	cs
   d5e44:	1ab6      	subcs	r6, r6, r2
   d5e46:	4675      	movcs	r5, lr
   d5e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e4c:	085b      	lsrs	r3, r3, #1
   d5e4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e52:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e5a:	bf22      	ittt	cs
   d5e5c:	1ab6      	subcs	r6, r6, r2
   d5e5e:	4675      	movcs	r5, lr
   d5e60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5e64:	ea55 0e06 	orrs.w	lr, r5, r6
   d5e68:	d018      	beq.n	d5e9c <__aeabi_ddiv+0x114>
   d5e6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5e6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5e72:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5e76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5e7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5e7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5e82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5e86:	d1c0      	bne.n	d5e0a <__aeabi_ddiv+0x82>
   d5e88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e8c:	d10b      	bne.n	d5ea6 <__aeabi_ddiv+0x11e>
   d5e8e:	ea41 0100 	orr.w	r1, r1, r0
   d5e92:	f04f 0000 	mov.w	r0, #0
   d5e96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e9a:	e7b6      	b.n	d5e0a <__aeabi_ddiv+0x82>
   d5e9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ea0:	bf04      	itt	eq
   d5ea2:	4301      	orreq	r1, r0
   d5ea4:	2000      	moveq	r0, #0
   d5ea6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5eaa:	bf88      	it	hi
   d5eac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5eb0:	f63f aeaf 	bhi.w	d5c12 <__aeabi_dmul+0xde>
   d5eb4:	ebb5 0c03 	subs.w	ip, r5, r3
   d5eb8:	bf04      	itt	eq
   d5eba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5ebe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ec2:	f150 0000 	adcs.w	r0, r0, #0
   d5ec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5eca:	bd70      	pop	{r4, r5, r6, pc}
   d5ecc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5ed0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5ed4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5ed8:	bfc2      	ittt	gt
   d5eda:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5ede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ee2:	bd70      	popgt	{r4, r5, r6, pc}
   d5ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ee8:	f04f 0e00 	mov.w	lr, #0
   d5eec:	3c01      	subs	r4, #1
   d5eee:	e690      	b.n	d5c12 <__aeabi_dmul+0xde>
   d5ef0:	ea45 0e06 	orr.w	lr, r5, r6
   d5ef4:	e68d      	b.n	d5c12 <__aeabi_dmul+0xde>
   d5ef6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5efa:	ea94 0f0c 	teq	r4, ip
   d5efe:	bf08      	it	eq
   d5f00:	ea95 0f0c 	teqeq	r5, ip
   d5f04:	f43f af3b 	beq.w	d5d7e <__aeabi_dmul+0x24a>
   d5f08:	ea94 0f0c 	teq	r4, ip
   d5f0c:	d10a      	bne.n	d5f24 <__aeabi_ddiv+0x19c>
   d5f0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f12:	f47f af34 	bne.w	d5d7e <__aeabi_dmul+0x24a>
   d5f16:	ea95 0f0c 	teq	r5, ip
   d5f1a:	f47f af25 	bne.w	d5d68 <__aeabi_dmul+0x234>
   d5f1e:	4610      	mov	r0, r2
   d5f20:	4619      	mov	r1, r3
   d5f22:	e72c      	b.n	d5d7e <__aeabi_dmul+0x24a>
   d5f24:	ea95 0f0c 	teq	r5, ip
   d5f28:	d106      	bne.n	d5f38 <__aeabi_ddiv+0x1b0>
   d5f2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f2e:	f43f aefd 	beq.w	d5d2c <__aeabi_dmul+0x1f8>
   d5f32:	4610      	mov	r0, r2
   d5f34:	4619      	mov	r1, r3
   d5f36:	e722      	b.n	d5d7e <__aeabi_dmul+0x24a>
   d5f38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f3c:	bf18      	it	ne
   d5f3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f42:	f47f aec5 	bne.w	d5cd0 <__aeabi_dmul+0x19c>
   d5f46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f4a:	f47f af0d 	bne.w	d5d68 <__aeabi_dmul+0x234>
   d5f4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f52:	f47f aeeb 	bne.w	d5d2c <__aeabi_dmul+0x1f8>
   d5f56:	e712      	b.n	d5d7e <__aeabi_dmul+0x24a>

000d5f58 <__gedf2>:
   d5f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5f5c:	e006      	b.n	d5f6c <__cmpdf2+0x4>
   d5f5e:	bf00      	nop

000d5f60 <__ledf2>:
   d5f60:	f04f 0c01 	mov.w	ip, #1
   d5f64:	e002      	b.n	d5f6c <__cmpdf2+0x4>
   d5f66:	bf00      	nop

000d5f68 <__cmpdf2>:
   d5f68:	f04f 0c01 	mov.w	ip, #1
   d5f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5f70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f7c:	bf18      	it	ne
   d5f7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5f82:	d01b      	beq.n	d5fbc <__cmpdf2+0x54>
   d5f84:	b001      	add	sp, #4
   d5f86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5f8a:	bf0c      	ite	eq
   d5f8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5f90:	ea91 0f03 	teqne	r1, r3
   d5f94:	bf02      	ittt	eq
   d5f96:	ea90 0f02 	teqeq	r0, r2
   d5f9a:	2000      	moveq	r0, #0
   d5f9c:	4770      	bxeq	lr
   d5f9e:	f110 0f00 	cmn.w	r0, #0
   d5fa2:	ea91 0f03 	teq	r1, r3
   d5fa6:	bf58      	it	pl
   d5fa8:	4299      	cmppl	r1, r3
   d5faa:	bf08      	it	eq
   d5fac:	4290      	cmpeq	r0, r2
   d5fae:	bf2c      	ite	cs
   d5fb0:	17d8      	asrcs	r0, r3, #31
   d5fb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5fb6:	f040 0001 	orr.w	r0, r0, #1
   d5fba:	4770      	bx	lr
   d5fbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fc4:	d102      	bne.n	d5fcc <__cmpdf2+0x64>
   d5fc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5fca:	d107      	bne.n	d5fdc <__cmpdf2+0x74>
   d5fcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fd4:	d1d6      	bne.n	d5f84 <__cmpdf2+0x1c>
   d5fd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5fda:	d0d3      	beq.n	d5f84 <__cmpdf2+0x1c>
   d5fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5fe0:	4770      	bx	lr
   d5fe2:	bf00      	nop

000d5fe4 <__aeabi_cdrcmple>:
   d5fe4:	4684      	mov	ip, r0
   d5fe6:	4610      	mov	r0, r2
   d5fe8:	4662      	mov	r2, ip
   d5fea:	468c      	mov	ip, r1
   d5fec:	4619      	mov	r1, r3
   d5fee:	4663      	mov	r3, ip
   d5ff0:	e000      	b.n	d5ff4 <__aeabi_cdcmpeq>
   d5ff2:	bf00      	nop

000d5ff4 <__aeabi_cdcmpeq>:
   d5ff4:	b501      	push	{r0, lr}
   d5ff6:	f7ff ffb7 	bl	d5f68 <__cmpdf2>
   d5ffa:	2800      	cmp	r0, #0
   d5ffc:	bf48      	it	mi
   d5ffe:	f110 0f00 	cmnmi.w	r0, #0
   d6002:	bd01      	pop	{r0, pc}

000d6004 <__aeabi_dcmpeq>:
   d6004:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6008:	f7ff fff4 	bl	d5ff4 <__aeabi_cdcmpeq>
   d600c:	bf0c      	ite	eq
   d600e:	2001      	moveq	r0, #1
   d6010:	2000      	movne	r0, #0
   d6012:	f85d fb08 	ldr.w	pc, [sp], #8
   d6016:	bf00      	nop

000d6018 <__aeabi_dcmplt>:
   d6018:	f84d ed08 	str.w	lr, [sp, #-8]!
   d601c:	f7ff ffea 	bl	d5ff4 <__aeabi_cdcmpeq>
   d6020:	bf34      	ite	cc
   d6022:	2001      	movcc	r0, #1
   d6024:	2000      	movcs	r0, #0
   d6026:	f85d fb08 	ldr.w	pc, [sp], #8
   d602a:	bf00      	nop

000d602c <__aeabi_dcmple>:
   d602c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6030:	f7ff ffe0 	bl	d5ff4 <__aeabi_cdcmpeq>
   d6034:	bf94      	ite	ls
   d6036:	2001      	movls	r0, #1
   d6038:	2000      	movhi	r0, #0
   d603a:	f85d fb08 	ldr.w	pc, [sp], #8
   d603e:	bf00      	nop

000d6040 <__aeabi_dcmpge>:
   d6040:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6044:	f7ff ffce 	bl	d5fe4 <__aeabi_cdrcmple>
   d6048:	bf94      	ite	ls
   d604a:	2001      	movls	r0, #1
   d604c:	2000      	movhi	r0, #0
   d604e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6052:	bf00      	nop

000d6054 <__aeabi_dcmpgt>:
   d6054:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6058:	f7ff ffc4 	bl	d5fe4 <__aeabi_cdrcmple>
   d605c:	bf34      	ite	cc
   d605e:	2001      	movcc	r0, #1
   d6060:	2000      	movcs	r0, #0
   d6062:	f85d fb08 	ldr.w	pc, [sp], #8
   d6066:	bf00      	nop

000d6068 <__aeabi_dcmpun>:
   d6068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d606c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6070:	d102      	bne.n	d6078 <__aeabi_dcmpun+0x10>
   d6072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6076:	d10a      	bne.n	d608e <__aeabi_dcmpun+0x26>
   d6078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d607c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6080:	d102      	bne.n	d6088 <__aeabi_dcmpun+0x20>
   d6082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6086:	d102      	bne.n	d608e <__aeabi_dcmpun+0x26>
   d6088:	f04f 0000 	mov.w	r0, #0
   d608c:	4770      	bx	lr
   d608e:	f04f 0001 	mov.w	r0, #1
   d6092:	4770      	bx	lr

000d6094 <__aeabi_d2iz>:
   d6094:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6098:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d609c:	d215      	bcs.n	d60ca <__aeabi_d2iz+0x36>
   d609e:	d511      	bpl.n	d60c4 <__aeabi_d2iz+0x30>
   d60a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d60a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d60a8:	d912      	bls.n	d60d0 <__aeabi_d2iz+0x3c>
   d60aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d60ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d60b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d60b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d60ba:	fa23 f002 	lsr.w	r0, r3, r2
   d60be:	bf18      	it	ne
   d60c0:	4240      	negne	r0, r0
   d60c2:	4770      	bx	lr
   d60c4:	f04f 0000 	mov.w	r0, #0
   d60c8:	4770      	bx	lr
   d60ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d60ce:	d105      	bne.n	d60dc <__aeabi_d2iz+0x48>
   d60d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d60d4:	bf08      	it	eq
   d60d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d60da:	4770      	bx	lr
   d60dc:	f04f 0000 	mov.w	r0, #0
   d60e0:	4770      	bx	lr
   d60e2:	bf00      	nop

000d60e4 <__aeabi_d2uiz>:
   d60e4:	004a      	lsls	r2, r1, #1
   d60e6:	d211      	bcs.n	d610c <__aeabi_d2uiz+0x28>
   d60e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d60ec:	d211      	bcs.n	d6112 <__aeabi_d2uiz+0x2e>
   d60ee:	d50d      	bpl.n	d610c <__aeabi_d2uiz+0x28>
   d60f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d60f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d60f8:	d40e      	bmi.n	d6118 <__aeabi_d2uiz+0x34>
   d60fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d60fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6102:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6106:	fa23 f002 	lsr.w	r0, r3, r2
   d610a:	4770      	bx	lr
   d610c:	f04f 0000 	mov.w	r0, #0
   d6110:	4770      	bx	lr
   d6112:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6116:	d102      	bne.n	d611e <__aeabi_d2uiz+0x3a>
   d6118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d611c:	4770      	bx	lr
   d611e:	f04f 0000 	mov.w	r0, #0
   d6122:	4770      	bx	lr

000d6124 <__cxa_atexit>:
   d6124:	b510      	push	{r4, lr}
   d6126:	4c05      	ldr	r4, [pc, #20]	; (d613c <__cxa_atexit+0x18>)
   d6128:	4613      	mov	r3, r2
   d612a:	b12c      	cbz	r4, d6138 <__cxa_atexit+0x14>
   d612c:	460a      	mov	r2, r1
   d612e:	4601      	mov	r1, r0
   d6130:	2002      	movs	r0, #2
   d6132:	f3af 8000 	nop.w
   d6136:	bd10      	pop	{r4, pc}
   d6138:	4620      	mov	r0, r4
   d613a:	e7fc      	b.n	d6136 <__cxa_atexit+0x12>
   d613c:	00000000 	.word	0x00000000

000d6140 <memcpy>:
   d6140:	440a      	add	r2, r1
   d6142:	4291      	cmp	r1, r2
   d6144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6148:	d100      	bne.n	d614c <memcpy+0xc>
   d614a:	4770      	bx	lr
   d614c:	b510      	push	{r4, lr}
   d614e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6152:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6156:	4291      	cmp	r1, r2
   d6158:	d1f9      	bne.n	d614e <memcpy+0xe>
   d615a:	bd10      	pop	{r4, pc}

000d615c <memset>:
   d615c:	4402      	add	r2, r0
   d615e:	4603      	mov	r3, r0
   d6160:	4293      	cmp	r3, r2
   d6162:	d100      	bne.n	d6166 <memset+0xa>
   d6164:	4770      	bx	lr
   d6166:	f803 1b01 	strb.w	r1, [r3], #1
   d616a:	e7f9      	b.n	d6160 <memset+0x4>

000d616c <srand>:
   d616c:	b538      	push	{r3, r4, r5, lr}
   d616e:	4b0d      	ldr	r3, [pc, #52]	; (d61a4 <srand+0x38>)
   d6170:	681d      	ldr	r5, [r3, #0]
   d6172:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6174:	4604      	mov	r4, r0
   d6176:	b97b      	cbnz	r3, d6198 <srand+0x2c>
   d6178:	2018      	movs	r0, #24
   d617a:	f7fe fa5f 	bl	d463c <malloc>
   d617e:	4a0a      	ldr	r2, [pc, #40]	; (d61a8 <srand+0x3c>)
   d6180:	4b0a      	ldr	r3, [pc, #40]	; (d61ac <srand+0x40>)
   d6182:	63a8      	str	r0, [r5, #56]	; 0x38
   d6184:	e9c0 2300 	strd	r2, r3, [r0]
   d6188:	4b09      	ldr	r3, [pc, #36]	; (d61b0 <srand+0x44>)
   d618a:	6083      	str	r3, [r0, #8]
   d618c:	230b      	movs	r3, #11
   d618e:	8183      	strh	r3, [r0, #12]
   d6190:	2201      	movs	r2, #1
   d6192:	2300      	movs	r3, #0
   d6194:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6198:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d619a:	2200      	movs	r2, #0
   d619c:	611c      	str	r4, [r3, #16]
   d619e:	615a      	str	r2, [r3, #20]
   d61a0:	bd38      	pop	{r3, r4, r5, pc}
   d61a2:	bf00      	nop
   d61a4:	2003e5dc 	.word	0x2003e5dc
   d61a8:	abcd330e 	.word	0xabcd330e
   d61ac:	e66d1234 	.word	0xe66d1234
   d61b0:	0005deec 	.word	0x0005deec

000d61b4 <strdup>:
   d61b4:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <strdup+0xc>)
   d61b6:	4601      	mov	r1, r0
   d61b8:	6818      	ldr	r0, [r3, #0]
   d61ba:	f000 b803 	b.w	d61c4 <_strdup_r>
   d61be:	bf00      	nop
   d61c0:	2003e5dc 	.word	0x2003e5dc

000d61c4 <_strdup_r>:
   d61c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d61c6:	4604      	mov	r4, r0
   d61c8:	4608      	mov	r0, r1
   d61ca:	460d      	mov	r5, r1
   d61cc:	f000 f80f 	bl	d61ee <strlen>
   d61d0:	1c42      	adds	r2, r0, #1
   d61d2:	4611      	mov	r1, r2
   d61d4:	4620      	mov	r0, r4
   d61d6:	9201      	str	r2, [sp, #4]
   d61d8:	f7fe fa48 	bl	d466c <_malloc_r>
   d61dc:	4604      	mov	r4, r0
   d61de:	b118      	cbz	r0, d61e8 <_strdup_r+0x24>
   d61e0:	9a01      	ldr	r2, [sp, #4]
   d61e2:	4629      	mov	r1, r5
   d61e4:	f7ff ffac 	bl	d6140 <memcpy>
   d61e8:	4620      	mov	r0, r4
   d61ea:	b003      	add	sp, #12
   d61ec:	bd30      	pop	{r4, r5, pc}

000d61ee <strlen>:
   d61ee:	4603      	mov	r3, r0
   d61f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61f4:	2a00      	cmp	r2, #0
   d61f6:	d1fb      	bne.n	d61f0 <strlen+0x2>
   d61f8:	1a18      	subs	r0, r3, r0
   d61fa:	3801      	subs	r0, #1
   d61fc:	4770      	bx	lr

000d61fe <link_code_end>:
	...

000d6200 <dynalib_user>:
   d6200:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6210:	0000 0000 694c 6867 2074 656c 6576 3a6c     ....Light level:
   d6220:	0020 737b 6e75 796e 007d 6873 6461 0079      .{sunny}.shady.

000d6230 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6238:	4739 000d 473f 000d 478f 000d 474d 000d     9G..?G...G..MG..
   d6248:	473b 000d                                   ;G..

000d624c <_ZTVN5spark13EthernetClassE>:
	...
   d6254:	4d07 000d 4cfd 000d 4cf3 000d 4ce9 000d     .M...L...L...L..
   d6264:	4cdd 000d 4cd1 000d 4cc5 000d 4cbd 000d     .L...L...L...L..
   d6274:	4cb3 000d 4ca9 000d 4f81 000d               .L...L...O..

000d6280 <_ZTV7TwoWire>:
	...
   d6288:	4d25 000d 4d6f 000d 4d47 000d 4d27 000d     %M..oM..GM..'M..
   d6298:	4d4f 000d 4d57 000d 4d5f 000d 4d67 000d     OM..WM.._M..gM..

000d62a8 <_ZTV9IPAddress>:
	...
   d62b0:	4e33 000d 4e23 000d 4e25 000d 7061 0070     3N..#N..%N..app.

000d62c0 <_ZTVN5spark12NetworkClassE>:
	...
   d62c8:	4f19 000d 4f23 000d 4f2d 000d 4f37 000d     .O..#O..-O..7O..
   d62d8:	4f41 000d 4f4d 000d 4f59 000d 4f65 000d     AO..MO..YO..eO..
   d62e8:	4f6d 000d 4f77 000d 4f81 000d 616e 006e     mO..wO...O..nan.
   d62f8:	6e69 0066 766f 0066 002e 5925 252d 2d6d     inf.ovf...%Y-%m-
   d6308:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d6318:	7463 6d69 0065 0000                         ctime...

000d6320 <_ZTV11USARTSerial>:
	...
   d6328:	5379 000d 53e5 000d 53bd 000d 5069 000d     yS...S...S..iP..
   d6338:	538d 000d 53a9 000d 539b 000d 53b7 000d     .S...S...S...S..
   d6348:	537b 000d 537f 000d                         {S...S..

000d6350 <_ZTV9USBSerial>:
	...
   d6358:	5479 000d 54e1 000d 54b7 000d 5069 000d     yT...T...T..iP..
   d6368:	54a9 000d 547b 000d 548b 000d 54db 000d     .T..{T...T...T..
   d6378:	549b 000d 5475 000d                         .T..uT..

000d6380 <_ZTVN5spark9WiFiClassE>:
	...
   d6388:	55e3 000d 55d9 000d 55cf 000d 5585 000d     .U...U...U...U..
   d6398:	55c3 000d 55b7 000d 55ab 000d 55a3 000d     .U...U...U...U..
   d63a8:	5599 000d 558f 000d 4f81 000d               .U...U...O..

000d63b4 <_ZSt7nothrow>:
	...

000d63b5 <link_const_variable_data_end>:
   d63b5:	00          	.byte	0x00
	...

000d63b8 <link_constructors_location>:
   d63b8:	000d41fd 	.word	0x000d41fd
   d63bc:	000d4711 	.word	0x000d4711
   d63c0:	000d4d11 	.word	0x000d4d11
   d63c4:	000d4f09 	.word	0x000d4f09
   d63c8:	000d5055 	.word	0x000d5055
   d63cc:	000d52ed 	.word	0x000d52ed
   d63d0:	000d5329 	.word	0x000d5329
   d63d4:	000d5365 	.word	0x000d5365
   d63d8:	000d55ed 	.word	0x000d55ed

000d63dc <link_constructors_end>:
   d63dc:	00000000 	.word	0x00000000
